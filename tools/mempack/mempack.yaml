# Output file (you will upload this single file to ChatGPT)
output: ./mempack.txt

notes: |
  Osiris – active milestone M1c (feature/m1c). Prioritize compiler+runner + chat flow fixes.
  Pack only deterministic, review-friendly sources. No secrets / no heavy logs / no run artifacts.

include:
# Core src
- osiris.py
- pyproject.toml
- requirements.txt
- setup.py
- osiris/cli/*.py
- osiris/core/*.py
- osiris/connectors/**/**/*.py
- osiris/components/*.py
- osiris/prompts/*
- osiris/runtime/*.py
- osiris/remote/*.py

# Components registry/specs
- components/spec.schema.json
- components/*/**/spec.yaml

# Docs – keep ADRs, milestones, roadmap + top-level docs + examples
- docs/adr/*.md
- docs/milestones/*.md
- docs/roadmap/*.md
- docs/*.md
- docs/examples/*.yaml
- docs/reference/aiop.*.json*
- docs/examples/aiop-*.json
- docs/examples/run-card-sample.md

# Test coverage research (exclude HTML)
- docs/testing/research/coverage-*/README.md
- docs/testing/research/coverage-*/coverage.md
- docs/testing/research/coverage-*/gaps-matrix.md
- docs/testing/research/coverage-*/tests-inventory.md
- docs/testing/research/coverage-*/coverage.json

# Tests (unit+integration+chat)
- tests/**/**/*.py
- tests/core/test_run_export_v2_*.py
- tests/integration/test_aiop_e2e.py

# Tools needed for context
- tools/mempack/*
- tools/validation/*.py
- tools/validation/README.md
- tools/validation/coverage_summary.py

# System prompts (prompt dumps from manual runs)
- testing_env/.osiris_prompts/**

# Repo meta (helps reviewers)
- CHANGELOG.md
- CLAUDE.md
- SECURITY.md
- LICENSE
- Makefile
- README.md
- pytest.ini

exclude:
# Coverage HTML reports (too large)
- "docs/testing/research/coverage-*/html/**"

# Python noise (still needed since .gitignore doesn't have these)
- "**/__pycache__/**"
- "**/*.pyc"

# Additional exclusions not in .gitignore
- "**/events.jsonl"
- "**/metrics.jsonl"
- "**/*.log"
- "artifacts/**"
- "logs/**"
- "testing_env/logs/**"
- "**/compiled/**"
- "**/artifacts/**"
- "demo/out/**"
- "output/**"
- "testing_env/dist/**"
- "osiris/tmp/**/artifacts/**"

- ".aiop-annex/**"
- "**/*.ndjson"
- "**/*.ndjson.gz"

# Repo internals not in .gitignore
- .git/**
- osiris_pipeline.egg-info/**
- uv.lock
- .venv/**
- .vscode/**
- .pytest_cache/**

# Note: Most other exclusions are now handled by .gitignore:
# - testing_env/ artifacts (handled by .gitignore)
# - output/ directories (handled by .gitignore)
# - compiled/ and _artifacts/ (handled by .gitignore)
# - mempack.txt itself (handled by .gitignore)

# Also embed a fresh project tree (so I can see structure at-a-glance)
embed_tree: true

# Automatically exclude files/dirs from .gitignore
# When true, patterns from .gitignore are applied before explicit excludes
# Include patterns can override gitignore/exclude patterns (include wins)
use_gitignore: true

# Safety: cap the size so we don't over-feed the model by accident
max_bytes: 6000000 # ~6 MB, uprav když bude potřeba

# ----------------------------------------------------------
# Commands: run before packing and include their stdout files
# ----------------------------------------------------------
commands:
- output_path: tools/mempack/gen/osiris-components-list.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py components list --json
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: fail

- output_path: tools/mempack/gen/osiris-connections-list.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py connections list --json
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: fail

- output_path: tools/mempack/gen/osiris.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py --help
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: keep # Keep output even if it fails (might not have connections configured)

- output_path: tools/mempack/gen/osiris-compile.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py compile --help
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: keep # Keep output even if it fails (might not have connections configured)

- output_path: tools/mempack/gen/osiris-run.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py run --help
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: keep # Keep output even if it fails (might not have connections configured)

- output_path: tools/mempack/gen/osiris-logs.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py logs --help
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: keep # Keep output even if it fails (might not have connections configured)

- output_path: tools/mempack/gen/osiris-test.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py test --help
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: keep # Keep output even if it fails (might not have connections configured)

- output_path: tools/mempack/gen/osiris-connections.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py connections --help
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: keep # Keep output even if it fails (might not have connections configured)

- output_path: tools/mempack/gen/osiris-components.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py components --help
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: keep # Keep output even if it fails (might not have connections configured)

- output_path: tools/mempack/gen/osiris-oml.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py oml --help
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: keep # Keep output even if it fails (might not have connections configured)

- output_path: tools/mempack/gen/osiris-dump-prompts.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py dump-prompts --help
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: keep # Keep output even if it fails (might not have connections configured)

- output_path: tools/mempack/gen/osiris-prompts.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py prompts --help
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: keep # Keep output even if it fails (might not have connections configured)

- output_path: tools/mempack/gen/osiris-logs-aiop.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py logs aiop --help
  with_cmd: true
  shell: bash
  timeout: 30s
  on_error: keep

# AIOP Core JSON (typický výstup)
- output_path: tools/mempack/gen/aiop.core.json
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py logs aiop --last --format json > ../tools/mempack/gen/aiop.core.json
  with_cmd: true
  shell: bash
  timeout: 45s
  on_error: keep

# AIOP Markdown run-card
- output_path: tools/mempack/gen/aiop.runcard.md
  run: |
    source .venv/bin/activate
    cd testing_env
    python ../osiris.py logs aiop --last --format md > ../tools/mempack/gen/aiop.runcard.md
  with_cmd: true
  shell: bash
  timeout: 45s
  on_error: keep

# AIOP Core s truncation (ověření markerů + exit=4; necháme keep, ať máme případně částečný výstup)
- output_path: tools/mempack/gen/aiop.core.small.json
  run: |
    source .venv/bin/activate
    cd testing_env
    (python ../osiris.py logs aiop --last --format json --max-core-bytes 1500 > ../tools/mempack/gen/aiop.core.small.json) || true
  with_cmd: true
  shell: bash
  timeout: 45s
  on_error: keep

# AIOP Annex (manifest v Core; vlastní NDJSON/GZ shards nechceme do mempacku tahat)
- output_path: tools/mempack/gen/aiop.annex.json
  run: |
    source .venv/bin/activate
    cd testing_env
    rm -rf .aiop-annex
    python ../osiris.py logs aiop --last --format json --policy annex --annex-dir .aiop-annex --compress gzip > ../tools/mempack/gen/aiop.annex.json
  with_cmd: true
  shell: bash
  timeout: 60s
  on_error: keep

# AIOP config precedence echo (CLI > ENV > YAML > defaults)
- output_path: tools/mempack/gen/aiop.config_effective.json
  run: |
    source .venv/bin/activate
    cd testing_env
    export OSIRIS_AIOP_TIMELINE_DENSITY=high
    python ../osiris.py logs aiop --last --format json --timeline-density low > ../tools/mempack/gen/aiop.config_effective.json
    unset OSIRIS_AIOP_TIMELINE_DENSITY
  with_cmd: true
  shell: bash
  timeout: 45s
  on_error: keep
