# Osiris Pipeline: Supabase to Shopify Data Transformation
# Generated by Osiris Conversational AI
# Description: Extract customer and order data from Supabase, transform and map to Shopify objects

metadata:
  name: supabase_to_shopify_sync
  description: Sync customer purchase data from Supabase to Shopify customer metafields
  version: 1.0.0
  created_at: 2025-01-01T10:00:00Z
  session_id: demo_session_001

# Scheduling configuration
scheduling:
  schedule: "0 2 * * *"  # Run daily at 2 AM
  timezone: "America/New_York"
  retries: 3
  retry_delay: 60  # seconds
  timeout: 3600  # 1 hour

# Data quality checks
data_quality:
  pre_checks:
    - source_connectivity: supabase
  post_checks:
    - min_customer_count: 10
    - max_data_age_days: 7
    - required_fields: [email, lifetime_value, customer_tier]

# Notifications
notifications:
  on_success:
    - type: webhook
      url: ${SLACK_WEBHOOK_URL}
      message: "✅ Shopify sync completed: {rows_processed} customers updated"
  on_failure:
    - type: ops_email
      to: ops@keboola.com
      subject: "❌ Shopify sync pipeline failed"

# Source: Supabase PostgreSQL Database
source:
  type: supabase
  config:
    url: ${SUPABASE_URL}
    key: ${SUPABASE_KEY}

# Extraction queries from Supabase tables
extract:
  - name: customer_purchases
    description: Extract customers with their lifetime purchase stats
    sql: |
      WITH customer_stats AS (
        SELECT
          c.id as customer_id,
          c.email,
          c.first_name,
          c.last_name,
          c.phone,
          c.created_at as customer_since,
          COUNT(DISTINCT o.id) as total_orders,
          SUM(o.total_amount) as lifetime_value,
          MAX(o.created_at) as last_order_date,
          AVG(o.total_amount) as avg_order_value
        FROM customers c
        LEFT JOIN orders o ON c.id = o.customer_id
        WHERE o.status = 'completed'
          AND o.created_at >= NOW() - INTERVAL '90 days'
        GROUP BY c.id, c.email, c.first_name, c.last_name, c.phone, c.created_at
        HAVING COUNT(o.id) > 0
      )
      SELECT * FROM customer_stats
      ORDER BY lifetime_value DESC

  - name: product_performance
    description: Extract top-selling products for customer recommendations
    sql: |
      SELECT
        p.sku,
        p.name as product_name,
        p.category,
        COUNT(DISTINCT oi.order_id) as times_ordered,
        SUM(oi.quantity) as total_quantity_sold,
        SUM(oi.price * oi.quantity) as total_revenue,
        AVG(r.rating) as avg_rating
      FROM products p
      JOIN order_items oi ON p.id = oi.product_id
      LEFT JOIN reviews r ON p.id = r.product_id
      WHERE oi.created_at >= NOW() - INTERVAL '30 days'
      GROUP BY p.sku, p.name, p.category
      HAVING SUM(oi.quantity) > 10

  - name: customer_segments
    description: Extract customer segments for targeted marketing
    sql: |
      SELECT
        c.email,
        CASE
          WHEN lifetime_value > 1000 THEN 'VIP'
          WHEN lifetime_value > 500 THEN 'Gold'
          WHEN lifetime_value > 100 THEN 'Silver'
          ELSE 'Bronze'
        END as customer_tier,
        CASE
          WHEN last_order_date > NOW() - INTERVAL '30 days' THEN 'Active'
          WHEN last_order_date > NOW() - INTERVAL '90 days' THEN 'At Risk'
          ELSE 'Churned'
        END as engagement_status
      FROM (
        SELECT
          c.email,
          SUM(o.total_amount) as lifetime_value,
          MAX(o.created_at) as last_order_date
        FROM customers c
        JOIN orders o ON c.id = o.customer_id
        WHERE o.status = 'completed'
        GROUP BY c.email
      ) customer_metrics

# Transform data using DuckDB
transform:
  - name: shopify_customer_metafields
    description: Transform data into Shopify customer metafield format
    sql: |
      SELECT
        cp.email as customer_email,
        -- Shopify metafield: customer.metafields.custom.lifetime_value
        ROUND(cp.lifetime_value, 2) as lifetime_value,
        -- Shopify metafield: customer.metafields.custom.total_orders
        cp.total_orders,
        -- Shopify metafield: customer.metafields.custom.avg_order_value
        ROUND(cp.avg_order_value, 2) as avg_order_value,
        -- Shopify metafield: customer.metafields.custom.customer_tier
        cs.customer_tier,
        -- Shopify metafield: customer.metafields.custom.engagement_status
        cs.engagement_status,
        -- Shopify metafield: customer.metafields.custom.last_order_date
        DATE(cp.last_order_date) as last_order_date,
        -- Shopify metafield: customer.metafields.custom.customer_since
        DATE(cp.customer_since) as customer_since,
        -- Shopify tags for segmentation
        ARRAY[
          'tier_' || LOWER(cs.customer_tier),
          'status_' || LOWER(REPLACE(cs.engagement_status, ' ', '_')),
          CASE
            WHEN cp.total_orders > 10 THEN 'frequent_buyer'
            WHEN cp.total_orders > 5 THEN 'repeat_customer'
            ELSE 'occasional_buyer'
          END
        ] as shopify_tags
      FROM customer_purchases cp
      JOIN customer_segments cs ON cp.email = cs.email

  - name: shopify_product_metafields
    description: Transform product data for Shopify product metafields
    sql: |
      SELECT
        sku as product_sku,
        -- Shopify metafield: product.metafields.custom.performance_score
        ROUND((times_ordered * 0.3 + total_quantity_sold * 0.3 +
               (total_revenue / 1000) * 0.2 + COALESCE(avg_rating, 3) * 0.2), 2) as performance_score,
        -- Shopify metafield: product.metafields.custom.total_revenue_30d
        ROUND(total_revenue, 2) as total_revenue_30d,
        -- Shopify metafield: product.metafields.custom.units_sold_30d
        total_quantity_sold as units_sold_30d,
        -- Shopify metafield: product.metafields.custom.avg_rating
        ROUND(COALESCE(avg_rating, 0), 1) as avg_rating,
        -- Shopify metafield: product.metafields.custom.trending_rank
        ROW_NUMBER() OVER (ORDER BY total_revenue DESC) as trending_rank,
        -- Shopify badges/tags
        CASE
          WHEN ROW_NUMBER() OVER (ORDER BY total_revenue DESC) <= 10 THEN 'bestseller'
          WHEN avg_rating >= 4.5 THEN 'top_rated'
          WHEN times_ordered > 50 THEN 'popular'
          ELSE 'standard'
        END as product_badge
      FROM product_performance

  - name: shopify_marketing_segments
    description: Create marketing automation segments for Shopify
    sql: |
      SELECT
        'vip_customers' as segment_name,
        ARRAY_AGG(customer_email) as email_list,
        COUNT(*) as segment_size,
        AVG(lifetime_value) as avg_ltv
      FROM shopify_customer_metafields
      WHERE customer_tier = 'VIP'

      UNION ALL

      SELECT
        'at_risk_customers' as segment_name,
        ARRAY_AGG(customer_email) as email_list,
        COUNT(*) as segment_size,
        AVG(lifetime_value) as avg_ltv
      FROM shopify_customer_metafields
      WHERE engagement_status = 'At Risk'

      UNION ALL

      SELECT
        'high_value_active' as segment_name,
        ARRAY_AGG(customer_email) as email_list,
        COUNT(*) as segment_size,
        AVG(lifetime_value) as avg_ltv
      FROM shopify_customer_metafields
      WHERE lifetime_value > 500
        AND engagement_status = 'Active'

# Load transformed data to destinations
load:
  - name: shopify_customer_sync
    description: Sync customer metafields to Shopify via API
    destination: shopify_api
    source_table: shopify_customer_metafields
    config:
      endpoint: ${SHOPIFY_STORE_URL}/admin/api/2024-01/customers
      api_key: ${SHOPIFY_API_KEY}
      method: PATCH
      batch_size: 100
      rate_limit: 2  # calls per second
      mapping:
        customer_identifier: customer_email
        metafields:
          - namespace: custom
            key: lifetime_value
            type: number_decimal
            value: lifetime_value
          - namespace: custom
            key: customer_tier
            type: single_line_text_field
            value: customer_tier
          - namespace: custom
            key: engagement_status
            type: single_line_text_field
            value: engagement_status
        tags: shopify_tags

  - name: shopify_product_sync
    description: Update product metafields in Shopify
    destination: shopify_api
    source_table: shopify_product_metafields
    config:
      endpoint: ${SHOPIFY_STORE_URL}/admin/api/2024-01/products
      api_key: ${SHOPIFY_API_KEY}
      method: PATCH
      batch_size: 50
      mapping:
        product_identifier: product_sku
        metafields:
          - namespace: custom
            key: performance_score
            type: number_decimal
            value: performance_score
          - namespace: custom
            key: trending_rank
            type: number_integer
            value: trending_rank

  - name: local_analytics_backup
    description: Save transformed data locally for analytics
    destination: duckdb
    source_table: shopify_customer_metafields
    config:
      database: ./output/shopify_sync_analytics.duckdb
      table: customer_metrics
      mode: overwrite

  - name: csv_export
    description: Export marketing segments to CSV for campaign tools
    destination: csv
    source_table: shopify_marketing_segments
    config:
      path: ./output/marketing_segments_{timestamp}.csv
      delimiter: ","
      header: true
