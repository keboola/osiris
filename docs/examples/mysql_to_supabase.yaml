# MySQL to Supabase Pipeline Example
# This example demonstrates migrating data from MySQL to Supabase (PostgreSQL)

oml_version: "0.1.0"
name: mysql-to-supabase-migration
description: Export MySQL tables to Supabase with proper type mapping

# Pipeline parameters (optional)
params:
  source_db:
    type: string
    default: production
    description: Source MySQL database
  batch_size:
    type: integer
    default: 1000
    description: Number of rows per batch

# Environment profiles (optional)
profiles:
  dev:
    params:
      source_db: development
      batch_size: 100
  prod:
    params:
      source_db: production
      batch_size: 1000

steps:
  # Extract users from MySQL
  - id: extract-users
    component: mysql.extractor
    mode: read
    config:
      query: |
        SELECT
          id,
          name,
          email,
          age,
          score,
          is_active,  -- TINYINT(1) in MySQL
          created_at,  -- DATETIME in MySQL
          updated_at,
          bio,
          metadata  -- JSON in MySQL
        FROM users
        WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
      connection: "@default"

  # Write users to Supabase (append mode)
  - id: write-users-append
    component: supabase.writer
    mode: write
    needs: ["extract-users"]
    config:
      table: users
      write_mode: append  # append, replace, or upsert
      batch_size: ${params.batch_size}
      create_if_missing: false  # Shows SQL but doesn't execute

  # Extract products from MySQL
  - id: extract-products
    component: mysql.extractor
    mode: read
    config:
      query: "SELECT * FROM products WHERE active = 1"
      connection: "@default"

  # Upsert products to Supabase (update existing, insert new)
  - id: write-products-upsert
    component: supabase.writer
    mode: write
    needs: ["extract-products"]
    config:
      table: products
      write_mode: upsert
      primary_key: product_id  # Required for upsert
      batch_size: ${params.batch_size}

  # Extract daily stats with composite key
  - id: extract-daily-stats
    component: mysql.extractor
    mode: read
    config:
      query: |
        SELECT
          DATE(created_at) as date,
          user_id,
          COUNT(*) as actions,
          SUM(amount) as total_amount
        FROM user_actions
        WHERE created_at >= CURDATE() - INTERVAL 7 DAY
        GROUP BY DATE(created_at), user_id
      connection: "@default"

  # Upsert daily stats with composite primary key
  - id: write-daily-stats
    component: supabase.writer
    mode: write
    needs: ["extract-daily-stats"]
    config:
      table: daily_user_stats
      write_mode: upsert
      primary_key: [date, user_id]  # Composite key for upsert
      batch_size: 500

  # Extract and replace entire lookup table
  - id: extract-categories
    component: mysql.extractor
    mode: read
    config:
      query: "SELECT * FROM categories"
      connection: "@default"

  # Replace entire categories table
  - id: replace-categories
    component: supabase.writer
    mode: write
    needs: ["extract-categories"]
    config:
      table: categories
      write_mode: replace  # Delete all then insert
      batch_size: 100

# Notes on Type Mapping (MySQL → PostgreSQL):
# - TINYINT(1) → BOOLEAN
# - INT/INTEGER → INTEGER
# - BIGINT → BIGINT
# - DECIMAL/NUMERIC → NUMERIC
# - FLOAT → REAL
# - DOUBLE → DOUBLE PRECISION
# - DATETIME/TIMESTAMP → TIMESTAMP/TIMESTAMPTZ
# - VARCHAR/TEXT → VARCHAR/TEXT
# - JSON → JSONB

# Connection Configuration (stored separately, not in YAML):
# mysql:
#   host: mysql.example.com
#   database: production
#   user: ${MYSQL_USER}
#   password: ${MYSQL_PASSWORD}
#
# supabase:
#   url: https://your-project.supabase.co
#   key: ${SUPABASE_ANON_KEY}
