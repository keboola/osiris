[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "osiris-pipeline"
version = "0.2.0"
description = "LLM-first conversational ETL pipeline generator"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Osiris Project", email = "petr@keboola.com"},
]
keywords = [
    "etl", "elt", "pipeline", "oml", "duckdb", "sql", "llm", "ai",
    "conversational", "data engineering", "human-in-the-loop",
    "mysql", "supabase", "postgres", "csv",
    "openai", "claude", "gemini", "sql safety"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
requires-python = ">=3.9"
dependencies = [
    "rich>=13.0.0",
    "pyyaml>=6.0.2",
    "duckdb>=0.9.0",
    "sqlalchemy>=2.0.0",
    "pymysql>=1.1.0",
    "supabase>=2.7.0",
    "openai>=1.3.0",
    "anthropic>=0.25.0",
    "google-generativeai>=0.5.0",
    "python-dotenv>=1.0.0",
    "pandas>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "bandit[toml]>=1.7.0",
    "detect-secrets>=1.4.0",
    "build>=0.10.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/keboola/osiris_pipeline"
Documentation = "https://github.com/keboola/osiris_pipeline/tree/main/docs"
Repository = "https://github.com/keboola/osiris_pipeline"
Issues = "https://github.com/keboola/osiris_pipeline/issues"
Changelog = "https://github.com/keboola/osiris_pipeline/blob/main/CHANGELOG.md"

[project.scripts]
osiris = "osiris.cli.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["osiris*"]
exclude = ["tests*", "testing_env*", "docs*", "examples*"]

# Package data configuration removed - no data files currently exist
# Re-add when actual template/config files are added to the package

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "llm: marks tests that require LLM API keys",
]

# Code formatting with Black
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | testing_env
)/
'''

# Import sorting with isort (compatible with Black)
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
extend_skip = ["testing_env", ".venv"]

# Type checking with mypy
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "testing_env/",
    "build/",
    "dist/",
]

# Linting with Ruff
[tool.ruff]
target-version = "py38"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "B905", # strict parameter for zip()
    "C901", # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "testing_env",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["S101", "ARG001", "ARG002"]
"tests/cli/test_connections_cmd.py" = ["S101", "ARG001", "ARG002", "SIM117"]
"tests/core/test_config_connections.py" = ["SIM117"]
"tests/chat/test_chat_mysql_to_csv.py" = ["SIM117"]
"tests/integration/test_runner_connections.py" = ["SIM117"]
"tests/chat/test_post_discovery_synthesis.py" = ["SIM117"]
"tests/remote/test_mini_runner.py" = ["SIM117"]
"osiris/core/runner_v0.py" = ["SIM108", "F841", "ARG002"]

# Coverage configuration
[tool.coverage.run]
source = ["osiris"]
omit = [
    "*/tests/*",
    "*/testing_env/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Security scanning with Bandit
[tool.bandit]
exclude_dirs = ["tests", "testing_env", ".venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection (for subprocess)
severity = "medium"

[tool.bandit.assert_used]
skips = ["**/tests/**", "**/test_*.py"]
