[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "osiris-pipeline"
version = "0.4.0"
description = "LLM-first conversational ETL pipeline generator"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Osiris Project", email = "petr@keboola.com"},
]
keywords = [
    "etl", "elt", "pipeline", "oml", "duckdb", "sql", "llm", "ai",
    "conversational", "data engineering", "human-in-the-loop",
    "mysql", "supabase", "postgres", "csv",
    "openai", "claude", "gemini", "sql safety"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
requires-python = ">=3.9"
dependencies = [
    "rich>=13.0.0",
    "pyyaml>=6.0.2",
    "duckdb>=0.9.0",
    "sqlalchemy>=2.0.0",
    "pymysql>=1.1.0",
    "supabase>=2.7.0",
    "openai>=1.3.0",
    "anthropic>=0.25.0",
    "google-generativeai>=0.5.0",
    "python-dotenv>=1.0.0",
    "pandas>=2.0.0",
    "jsonschema>=4.25.1",
    "requests>=2.32.5",
    "jsonpath-ng>=1.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "bandit[toml]>=1.7.0",
    "detect-secrets>=1.4.0",
    "build>=0.10.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/keboola/osiris_pipeline"
Documentation = "https://github.com/keboola/osiris_pipeline/tree/main/docs"
Repository = "https://github.com/keboola/osiris_pipeline"
Issues = "https://github.com/keboola/osiris_pipeline/issues"
Changelog = "https://github.com/keboola/osiris_pipeline/blob/main/CHANGELOG.md"

[project.scripts]
osiris = "osiris.cli.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["osiris*"]
exclude = ["tests*", "testing_env*", "docs*", "examples*"]

# Package data configuration removed - no data files currently exist
# Re-add when actual template/config files are added to the package

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "llm: marks tests that require LLM API keys",
]

# Code formatting with Black
[tool.black]
line-length = 120
target-version = ["py311"]

# Import sorting with isort (compatible with Black)
[tool.isort]
profile = "black"
line_length = 120
force_sort_within_sections = true
known_first_party = ["osiris"]

# Type checking with mypy
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "testing_env/",
    "build/",
    "dist/",
]

# Linting with Ruff
[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B", "SIM", "PL", "W"]
# Optional pragmatics to reduce friction in complex code paths
extend-ignore = ["E203", "E501", "SIM102", "PLC1901", "PLR0911", "PLR0912", "PLR0913", "PLR2004", "ARG002", "TRY003", "EM102", "SIM108", "C901"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["S101", "PLR2004", "ARG002", "ARG001", "PLC0415", "PLR0915", "SIM117", "E402", "PLW2901", "F841", "F821", "SIM105"]
"tests/cli/test_connections_cmd.py" = ["S101", "ARG001", "ARG002", "SIM117", "PLR2004"]
"tests/core/test_config_connections.py" = ["SIM117", "PLR2004"]
"tests/chat/test_chat_mysql_to_csv.py" = ["SIM117", "PLR2004"]
"tests/integration/test_runner_connections.py" = ["SIM117", "PLR2004"]
"tests/chat/test_post_discovery_synthesis.py" = ["SIM117", "PLR2004"]
"tests/remote/test_mini_runner.py" = ["SIM117", "PLR2004"]
"osiris/core/runner_v0.py" = ["SIM108", "F841", "ARG002", "PLR0915", "PLC0415"]  # Complex runner with dynamic driver loading
# CLI modules with complex command handling - justified complexity
"osiris/cli/chat.py" = ["PLR0915"]  # Complex interactive chat command
"osiris/cli/compile.py" = ["PLR0915"]  # Complex compilation with validation
"osiris/cli/components_cmd.py" = ["PLC0415", "PLR0915"]  # Dynamic imports for driver checks
"osiris/cli/connections_cmd.py" = ["PLC0415", "PLR0915"]  # Dynamic imports for connection testing
"osiris/cli/logs.py" = ["PLC0415", "PLR0915"]  # Dynamic imports for rendering
"osiris/cli/main.py" = ["PLC0415", "PLR0915", "PLW0603"]  # Complex CLI routing, global for JSON output
"osiris/cli/oml_validate.py" = ["PLR0915"]  # Complex validation logic
"osiris/cli/run.py" = ["PLC0415", "PLR0915"]  # Complex run command with dynamic imports
"osiris/cli/run_command.py" = ["PLC0415"]  # Dynamic imports
# Core modules with justified late imports
"osiris/core/compiler_v0.py" = ["PLR0915", "PLC0415", "PLW2901"]  # Complex compilation logic with dynamic imports
"osiris/core/conversational_agent.py" = ["PLR0915", "PLC0415"]  # Complex agent logic, dynamic imports
"osiris/core/discovery.py" = ["PLR0915", "PLC0415"]  # Complex discovery logic with dynamic imports
"osiris/core/config.py" = ["PLC0415"]  # Dynamic imports
"osiris/core/driver.py" = ["PLC0415"]  # Dynamic imports
"osiris/core/fingerprint.py" = ["PLC0415"]  # Dynamic imports
"osiris/core/oml_validator.py" = ["PLR0915"]  # Complex validation
"osiris/core/prompt_manager.py" = ["PLC0415"]  # Dynamic imports
"osiris/core/redaction.py" = ["PLC0415"]  # Dynamic imports
"osiris/core/run_export_v2.py" = ["PLR0915", "PLC0415", "PLW2901"]  # Complex export logic with var reassignment
"osiris/core/aiop_export.py" = ["PLR0915", "PLC0415", "SIM105"]  # Complex AIOP export, contextlib not needed
"osiris/core/llm_adapter.py" = ["PLR0915", "PLC0415"]  # Complex LLM logic
"osiris/core/session_logging.py" = ["PLR0915", "PLC0415", "PLW0603"]  # Complex logging with global session
"osiris/core/validation.py" = ["PLC0415"]  # Dynamic imports
"osiris/core/session_reader.py" = ["PLR0915", "PLC0415"]  # Complex session reading
"osiris/drivers/supabase_writer_driver.py" = ["PLC0415", "PLW0602", "PLW1508", "F841", "F401"]  # Dynamic psycopg2 import
"osiris/remote/proxy_worker.py" = ["PLR0915", "PLC0415"]  # Complex worker logic
"osiris/remote/e2b_adapter.py" = ["PLR0915", "PLC0415", "PLW2901"]  # Complex E2B adapter with var reassignment
"osiris/remote/e2b_integration.py" = ["PLR0915", "PLW2901"]  # Complex integration logic
"osiris/remote/e2b_transparent_proxy.py" = ["PLR0915", "PLC0415"]  # Complex proxy logic
"osiris/remote/e2b_pack.py" = ["PLR0915", "PLC0415"]  # Complex packing logic
"osiris/remote/e2b_full_pack.py" = ["PLR0915", "PLC0415"]  # Complex packing logic
"osiris/remote/e2b_client.py" = ["PLR0915", "PLC0415"]  # Complex E2B client
"osiris/remote/proxy_worker_runner.py" = ["PLR0915", "PLC0415"]  # Complex runner
"osiris/runtime/local_adapter.py" = ["PLR0915", "PLC0415"]  # Complex adapter logic
# Component modules with justified late imports
"osiris/components/error_mapper.py" = ["PLC0415"]  # Dynamic imports for error mapping
"osiris/components/registry.py" = ["PLW0603"]  # Global registry pattern
"osiris/components/utils.py" = ["PLC0415", "PLW2901"]  # Dynamic imports and loop var reassignment
# Connector modules with lazy imports
"osiris/connectors/mysql/client.py" = ["PLC0415"]  # Lazy import of heavy dependencies
"osiris/connectors/supabase/client.py" = ["PLC0415"]  # Lazy import of heavy dependencies
"osiris/connectors/supabase/writer.py" = ["PLC0415"]  # Dynamic imports
# Additional core modules with justified patterns
"osiris/core/adapter_factory.py" = ["PLC0415"]  # Dynamic adapter loading
"osiris/core/cache_fingerprint.py" = ["PLC0415"]  # Lazy imports
"osiris/core/test_harness.py" = ["PLC0415", "PLR0915"]  # Complex test harness
"osiris/drivers/**/*.py" = ["PLC0415", "PLR0915"]  # All drivers have dynamic imports
"osiris/prompts/**/*.py" = ["PLC0415", "PLR0915"]  # Dynamic prompt loading
# Prototype and demo code
"osiris/prototypes/**/*.py" = ["PLC0415", "PLR0915", "PLW0603"]  # Prototype code
# Scripts and tools are development utilities, not production code
"scripts/**/*.py" = ["PLR0915", "PLC0415", "PLW2901", "PLW1508"]  # Scripts with flexible patterns
"tools/**/*.py" = ["PLR0915", "PLC0415", "PLW2901"]

# Coverage configuration
[tool.coverage.run]
source = ["osiris"]
omit = [
    "*/tests/*",
    "*/testing_env/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Security scanning with Bandit
[tool.bandit]
exclude_dirs = ["tests", "testing_env", ".venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection (for subprocess)
severity = "medium"

[tool.bandit.assert_used]
skips = ["**/tests/**", "**/test_*.py"]
