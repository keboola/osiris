# # Copyright (c) 2025 Osiris Project
# #
# # Licensed under the Apache License, Version 2.0 (the "License");
# # you may not use this file except in compliance with the License.
# # You may obtain a copy of the License at
# #
# #     http://www.apache.org/licenses/LICENSE-2.0
# #
# # Unless required by applicable law or agreed to in writing, software
# # distributed under the License is distributed on an "AS IS" BASIS,
# # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# # See the License for the specific language governing permissions and
# # limitations under the License.

"""Main CLI entry point for Osiris v2."""

import argparse
import contextlib
import json
import logging
import sys

from rich.console import Console

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
logger = logging.getLogger(__name__)
console = Console()

# Global flag for JSON output mode
json_output = False


def show_main_help():
    """Display clean main help using simple Rich formatting."""

    console.print()
    console.print(
        "[bold green]Osiris v2 - Autonomous AI Agent for Reliable Data Pipelines.[/bold green]"
    )
    console.print("ü§ñ Your AI data engineering buddy that discovers, analyzes, and executes")
    console.print("production-ready ETL pipelines through natural conversation.")
    console.print()

    # Usage
    console.print("[bold]Usage:[/bold] osiris.py [OPTIONS] COMMAND [ARGS]...")
    console.print()

    # Quick Start
    console.print("[bold blue]üí° Quick Start[/bold blue]")
    console.print("  [cyan]1.[/cyan] [green]osiris init[/green]      Create configuration files")
    console.print(
        "  [cyan]2.[/cyan] [green]osiris chat[/green]     Start conversational pipeline generation"
    )
    console.print("  [cyan]3.[/cyan] [green]osiris validate[/green] Check your setup")
    console.print()

    # Commands
    console.print("[bold blue]Commands[/bold blue]")
    console.print(
        "  [cyan]init[/cyan]         Initialize a new Osiris project with sample configuration"
    )
    console.print(
        "  [cyan]validate[/cyan]     Validate Osiris configuration file and environment setup"
    )
    console.print("  [cyan]chat[/cyan]         Conversational pipeline generation with LLM")
    console.print("  [cyan]compile[/cyan]      Compile OML pipeline to deterministic manifest")
    console.print("  [cyan]run[/cyan]          Execute pipeline (OML or compiled manifest)")
    console.print("  [cyan]logs[/cyan]         Manage session logs (list, show, bundle, gc)")
    console.print("  [cyan]test[/cyan]         Run automated test scenarios")
    console.print("  [cyan]components[/cyan]   Manage and inspect Osiris components")
    console.print(
        "  [cyan]dump-prompts[/cyan] Export LLM system prompts for customization (pro mode)\n"
        "  [cyan]prompts[/cyan]      Manage component context for LLM"
    )
    console.print()

    # Options
    console.print("[bold blue]Global Options[/bold blue]")
    console.print("  [cyan]--json[/cyan]           Output in JSON format (for programmatic use)")
    console.print("  [cyan]--verbose[/cyan], [cyan]-v[/cyan]  Enable verbose logging")
    console.print("  [cyan]--version[/cyan]        Show version and exit")
    console.print("  [cyan]--help[/cyan], [cyan]-h[/cyan]     Show this help message")
    console.print()


def parse_main_args():
    """Parse main command line arguments preserving order for subcommands."""
    import sys

    # Find the command position
    command = None
    command_index = None

    # Skip script name and look for first non-flag argument that's a valid command
    for i, arg in enumerate(sys.argv[1:], 1):
        if not arg.startswith("-") and arg in [
            "init",
            "validate",
            "chat",
            "run",
            "compile",
            "logs",
            "test",
            "components",
            "dump-prompts",
            "prompts",
        ]:
            command = arg
            command_index = i
            break

    # Parse global flags before the command
    global_args = []
    command_args = []

    if command_index:
        global_args = sys.argv[1:command_index]  # Everything before command
        command_args = sys.argv[command_index + 1 :]  # Everything after command (preserve order!)
    else:
        global_args = sys.argv[1:]  # No command found, everything is global

    # Parse global arguments
    parser = argparse.ArgumentParser(
        description="Osiris v2 - Autonomous AI Agent for Reliable Data Pipelines",
        add_help=False,
        prog="osiris.py",
    )

    parser.add_argument("--verbose", "-v", action="store_true", help="Enable verbose logging")
    parser.add_argument(
        "--json", action="store_true", help="Output in JSON format for programmatic use"
    )
    parser.add_argument("--version", action="store_true", help="Show version and exit")
    parser.add_argument("--help", "-h", action="store_true", help="Show this help message")

    try:
        global_parsed = parser.parse_args(global_args)
    except SystemExit:
        # If global args parsing fails, fallback to original behavior
        parser.add_argument("command", nargs="?", help="Command to run (init, validate, chat, run)")
        parser.add_argument("args", nargs="*", help="Command arguments")
        return parser.parse_known_args()

    # Create a simple object to match the old interface
    class ParsedArgs:
        def __init__(self):
            self.verbose = global_parsed.verbose
            self.json = global_parsed.json
            self.version = global_parsed.version
            self.help = global_parsed.help
            self.command = command
            self.args = command_args  # Preserve original order!

    return ParsedArgs(), []  # Return empty unknown list for compatibility


def main():
    """Main CLI entry point with Rich formatting."""
    global json_output

    # Special handling for chat command to preserve argument order
    if len(sys.argv) > 1 and sys.argv[1] == "chat":
        from .chat import chat

        # Pass all arguments after "chat" directly
        chat_args = sys.argv[2:]  # Skip "osiris.py" and "chat"
        chat(chat_args)
        return

    args, unknown = parse_main_args()

    # Set JSON output mode
    json_output = args.json

    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    if args.version:
        if json_output:
            print(json.dumps({"version": "v2.0.0-mvp"}))
        else:
            console.print("Osiris v2.0.0-mvp")
        return

    # Handle commands first, then help
    # If help is requested with a command, pass it to the command
    command_args = ["--help"] + args.args if args.help and args.command else args.args

    if args.command == "init":
        init_command(command_args)
    elif args.command == "validate":
        validate_command(command_args)
    elif args.command == "run":
        run_command(command_args)
    elif args.command == "logs":
        logs_command(command_args)
    elif args.command == "test":
        test_command(command_args)
    elif args.command == "components":
        components_command(command_args)
    elif args.command == "compile":
        from .compile import compile_command

        compile_command(command_args)
    elif args.command == "dump-prompts":
        dump_prompts_command(command_args)
    elif args.command == "prompts":
        prompts_command(command_args)
    elif args.command == "chat":
        # This case is now handled early in main() to preserve argument order
        pass
    elif args.help or not args.command:
        if json_output:
            print(
                json.dumps(
                    {
                        "error": "No command specified",
                        "available_commands": [
                            "init",
                            "validate",
                            "chat",
                            "compile",
                            "run",
                            "logs",
                            "components",
                            "dump-prompts",
                            "prompts",
                        ],
                    }
                )
            )
        else:
            show_main_help()
    else:
        if json_output:
            print(
                json.dumps(
                    {
                        "error": f"Unknown command: {args.command}",
                        "available_commands": [
                            "init",
                            "validate",
                            "chat",
                            "compile",
                            "run",
                            "logs",
                            "components",
                            "dump-prompts",
                            "prompts",
                        ],
                    }
                )
            )
        else:
            console.print(f"‚ùå Unknown command: {args.command}")
            console.print("üí° Run 'osiris.py --help' to see available commands")
        sys.exit(1)


def init_command(args: list):
    """Initialize a new Osiris project with sample configuration."""
    # Check for help flag first
    if "--help" in args or "-h" in args:
        # Check if JSON output is requested
        if "--json" in args or json_output:
            help_data = {
                "command": "init",
                "description": "Initialize a new Osiris project with sample configuration",
                "usage": "osiris init [OPTIONS]",
                "options": {
                    "--json": "Output in JSON format for programmatic use",
                    "--help": "Show this help message",
                },
                "creates": [
                    "osiris.yaml - Main configuration file",
                    "Sample settings for logging, output, sessions",
                    "LLM and pipeline configuration templates",
                ],
                "next_steps": [
                    "Create .env file with your credentials",
                    "Run 'osiris validate' to check setup",
                    "Run 'osiris chat' to start pipeline generation",
                ],
                "examples": ["osiris init", "osiris init --json"],
            }
            print(json.dumps(help_data, indent=2))
        else:
            console.print()
            console.print("[bold green]osiris init - Initialize Project[/bold green]")
            console.print("üöÄ Create a new Osiris project with sample configuration")
            console.print()
            console.print("[bold]Usage:[/bold] osiris init [OPTIONS]")
            console.print()
            console.print("[bold blue]Options[/bold blue]")
            console.print("  [cyan]--json[/cyan]  Output in JSON format for programmatic use")
            console.print("  [cyan]--help[/cyan]  Show this help message")
            console.print()
            console.print("[bold blue]What this creates[/bold blue]")
            console.print("  ‚Ä¢ osiris.yaml - Main configuration file")
            console.print("  ‚Ä¢ Sample settings for logging, output, sessions")
            console.print("  ‚Ä¢ LLM and pipeline configuration templates")
            console.print()
            console.print("[bold blue]Next steps after init[/bold blue]")
            console.print("  1. Create .env file with your credentials")
            console.print("  2. Run 'osiris validate' to check setup")
            console.print("  3. Run 'osiris chat' to start pipeline generation")
            console.print()
        return

    # Parse init-specific arguments
    parser = argparse.ArgumentParser(description="Initialize Osiris project", add_help=False)
    parser.add_argument("--json", action="store_true", help="Output in JSON format")

    try:
        parsed_args = parser.parse_args(args)
    except SystemExit:
        if json_output:
            print(json.dumps({"error": "Invalid arguments"}))
        else:
            console.print("‚ùå Invalid arguments. Use --help for usage information.")
        return

    use_json = json_output or parsed_args.json
    try:
        from pathlib import Path

        from ..core.config import create_sample_config

        # Check if config already exists
        config_exists = Path("osiris.yaml").exists()

        create_sample_config()

        if use_json:
            result = {
                "status": "success",
                "message": "Osiris project initialization complete",
                "config_file": "osiris.yaml",
                "config_existed": config_exists,
                "config_sections": [
                    "logging",
                    "output",
                    "sessions",
                    "discovery",
                    "llm",
                    "pipeline",
                ],
                "next_steps": [
                    "Create .env file with database and LLM credentials",
                    "Run 'osiris validate' to check your setup",
                    "Run 'osiris chat' to start pipeline generation",
                ],
            }
            print(json.dumps(result, indent=2))
        else:
            console.print("üöÄ Osiris project initialization complete!")
            console.print("")

            if config_exists:
                console.print("‚ö†Ô∏è  Existing config backed up to osiris.yaml.backup")

            console.print("‚úÖ Created sample osiris.yaml configuration")
            console.print(
                "üìã Configuration includes: logging, output, sessions, discovery, LLM, pipeline settings"
            )
            console.print("")

            # Check if .env.dist exists
            env_dist_exists = Path("../.env.dist").exists()
            if env_dist_exists:
                console.print("üîê Next steps for database and LLM setup:")
                console.print("   1. Copy environment template:")
                console.print("      cp ../.env.dist .env")
                console.print("   2. Edit .env with your credentials:")
                console.print(
                    "      ‚Ä¢ Database: MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE"
                )
                console.print("      ‚Ä¢ Database: SUPABASE_PROJECT_ID, SUPABASE_ANON_PUBLIC_KEY")
                console.print("      ‚Ä¢ LLM APIs: OPENAI_API_KEY, CLAUDE_API_KEY, GEMINI_API_KEY")
            else:
                console.print("üîê Environment setup:")
                console.print("   Create .env file with your credentials:")
                console.print(
                    "   ‚Ä¢ Database: MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE"
                )
                console.print("   ‚Ä¢ Database: SUPABASE_PROJECT_ID, SUPABASE_ANON_PUBLIC_KEY")
                console.print("   ‚Ä¢ LLM APIs: OPENAI_API_KEY, CLAUDE_API_KEY, GEMINI_API_KEY")

            console.print("")
            console.print("üí° Ready to continue:")
            console.print("   osiris validate      # Check your setup")
            console.print("   osiris chat          # Start pipeline generation")

    except Exception as e:
        if use_json:
            print(json.dumps({"status": "error", "message": str(e)}))
        else:
            console.print(f"‚ùå Initialization failed: {e}")
        sys.exit(1)


def validate_command(args: list):
    """Validate Osiris configuration file and environment setup."""
    # Check for help flag first
    if "--help" in args or "-h" in args:
        # Check if JSON output is requested
        if "--json" in args or json_output:
            help_data = {
                "command": "validate",
                "description": "Validate Osiris configuration file and environment setup",
                "usage": "osiris validate [OPTIONS]",
                "options": {
                    "--config FILE": "Configuration file to validate (default: osiris.yaml)",
                    "--mode MODE": "Validation mode: warn (show warnings), strict (block on errors), off (disable)",
                    "--json": "Output in JSON format for programmatic use",
                    "--help": "Show this help message",
                },
                "checks": [
                    "Configuration file syntax and structure",
                    "All required sections (logging, output, sessions, etc.)",
                    "Database connection environment variables",
                    "LLM API keys availability",
                ],
                "examples": [
                    "osiris validate",
                    "osiris validate --config custom.yaml",
                    "osiris validate --json",
                ],
            }
            print(json.dumps(help_data, indent=2))
        else:
            console.print()
            console.print("[bold green]osiris validate - Validate Configuration[/bold green]")
            console.print("üîç Check Osiris configuration file and environment setup")
            console.print()
            console.print("[bold]Usage:[/bold] osiris validate [OPTIONS]")
            console.print()
            console.print("[bold blue]Options[/bold blue]")
            console.print(
                "  [cyan]--config FILE[/cyan]  Configuration file to validate (default: osiris.yaml)"
            )
            console.print(
                "  [cyan]--mode MODE[/cyan]    Validation mode: warn (show warnings), strict (block on errors), off (disable)"
            )
            console.print(
                "  [cyan]--json[/cyan]         Output in JSON format for programmatic use"
            )
            console.print("  [cyan]--help[/cyan]         Show this help message")
            console.print()
            console.print("[bold blue]What this checks[/bold blue]")
            console.print("  ‚Ä¢ Configuration file syntax and structure")
            console.print("  ‚Ä¢ All required sections (logging, output, sessions, etc.)")
            console.print("  ‚Ä¢ Database connection environment variables")
            console.print("  ‚Ä¢ LLM API keys availability")
            console.print()
            console.print("[bold blue]Examples[/bold blue]")
            console.print("  [green]# Validate default configuration[/green]")
            console.print("  osiris validate")
            console.print()
            console.print("  [green]# Check specific config file[/green]")
            console.print("  osiris validate --config custom.yaml")
            console.print()
            console.print("  [green]# Get JSON output for scripts[/green]")
            console.print("  osiris validate --json")
            console.print()
        return

    # Parse validate-specific arguments
    parser = argparse.ArgumentParser(description="Validate configuration", add_help=False)
    parser.add_argument("--config", default="osiris.yaml", help="Configuration file to validate")
    parser.add_argument("--json", action="store_true", help="Output in JSON format")
    parser.add_argument(
        "--mode",
        choices=["warn", "strict", "off"],
        help="Validation mode (default: from OSIRIS_VALIDATION env var or 'warn')",
    )

    # Only parse the args we received
    try:
        parsed_args = parser.parse_args(args)
    except SystemExit:
        if json_output:
            print(json.dumps({"error": "Invalid arguments"}))
        else:
            console.print("‚ùå Invalid arguments. Use --help for usage information.")
        return

    use_json = json_output or parsed_args.json

    try:
        import os
        from pathlib import Path

        from ..core.config import load_config
        from ..core.validation import ConnectionValidator, ValidationMode, get_validation_mode

        # Load .env file if it exists
        try:
            from dotenv import load_dotenv

            env_file = Path(".env")
            if env_file.exists():
                load_dotenv(env_file)
            else:
                load_dotenv()  # Load from .env in current directory if it exists
        except ImportError:
            # python-dotenv not installed, skip loading .env file
            pass

        # Load config first to get logs_dir setting
        config_data = load_config(parsed_args.config)

        # Get logs directory from config, fallback to "logs"
        logs_dir = "logs"  # default
        if "logging" in config_data and "logs_dir" in config_data["logging"]:
            logs_dir = config_data["logging"]["logs_dir"]

        # Get events filter from config, fallback to wildcard (all events)
        allowed_events = ["*"]  # default
        if "logging" in config_data and "events" in config_data["logging"]:
            allowed_events = config_data["logging"]["events"]

        # Create ephemeral session with correct logs directory and event filter
        import logging
        import time

        from ..core.session_logging import SessionContext, set_current_session

        session_id = f"ephemeral_validate_{int(time.time())}"
        session = SessionContext(
            session_id=session_id, base_logs_dir=Path(logs_dir), allowed_events=allowed_events
        )
        set_current_session(session)

        # Setup logging with the configured level (respecting precedence: CLI > ENV > YAML > default)
        log_level_str = "INFO"  # Default

        # 1. Check YAML config
        if "logging" in config_data and "level" in config_data["logging"]:
            log_level_str = config_data["logging"]["level"]

        # 2. Check ENV override
        if "OSIRIS_LOG_LEVEL" in os.environ:
            log_level_str = os.environ["OSIRIS_LOG_LEVEL"]

        # 3. Check CLI override (would need to add --log-level flag)
        # For now, we'll use ENV and YAML only

        # Convert string to logging level
        log_level = getattr(logging, log_level_str.upper(), logging.INFO)

        # Setup session logging with the appropriate level
        enable_debug = log_level <= logging.DEBUG
        session.setup_logging(level=log_level, enable_debug=enable_debug)

        # Get a logger for validation
        logger = logging.getLogger("osiris.validate")

        # Log the start event
        session.log_event(
            "validate_start",
            config_file=parsed_args.config,
            mode=parsed_args.mode,
            log_level=log_level_str,
        )

        # Log validation start at various levels
        logger.debug(f"Starting validation with config file: {parsed_args.config}")
        logger.info(f"Validation mode: {parsed_args.mode or 'default'}")
        logger.info(f"Log level: {log_level_str}")

        # Build validation results
        validation_results = {
            "config_file": parsed_args.config,
            "config_valid": True,
            "sections": {},
            "database_connections": {},
            "llm_providers": {},
            "connection_validation": {},
        }

        # Validate configuration sections
        logger.debug("Validating configuration sections...")

        # Logging section
        if "logging" in config_data:
            logging_cfg = config_data["logging"]
            validation_results["sections"]["logging"] = {
                "status": "configured",
                "level": logging_cfg.get("level", "INFO"),
                "file": logging_cfg.get("file") if logging_cfg.get("file") else None,
            }
            logger.debug(f"Logging section configured: level={logging_cfg.get('level', 'INFO')}")
        else:
            validation_results["sections"]["logging"] = {"status": "missing"}
            logger.warning("Logging section missing from configuration")

        # Output section
        if "output" in config_data:
            output_cfg = config_data["output"]
            validation_results["sections"]["output"] = {
                "status": "configured",
                "format": output_cfg.get("format", "csv"),
                "directory": output_cfg.get("directory", "output/"),
            }
        else:
            validation_results["sections"]["output"] = {"status": "missing"}

        # Sessions section
        if "sessions" in config_data:
            sessions_cfg = config_data["sessions"]
            validation_results["sections"]["sessions"] = {
                "status": "configured",
                "cleanup_days": sessions_cfg.get("cleanup_days", 30),
                "cache_ttl": sessions_cfg.get("cache_ttl", 3600),
            }
        else:
            validation_results["sections"]["sessions"] = {"status": "missing"}

        # Discovery section
        if "discovery" in config_data:
            discovery_cfg = config_data["discovery"]
            validation_results["sections"]["discovery"] = {
                "status": "configured",
                "sample_size": discovery_cfg.get("sample_size", 10),
                "timeout_seconds": discovery_cfg.get("timeout_seconds", 30),
            }
        else:
            validation_results["sections"]["discovery"] = {"status": "missing"}

        # LLM section
        if "llm" in config_data:
            llm_cfg = config_data["llm"]
            validation_results["sections"]["llm"] = {
                "status": "configured",
                "provider": llm_cfg.get("provider", "openai"),
                "temperature": llm_cfg.get("temperature", 0.1),
                "max_tokens": llm_cfg.get("max_tokens", 2000),
            }
        else:
            validation_results["sections"]["llm"] = {"status": "missing"}

        # Pipeline section
        if "pipeline" in config_data:
            pipeline_cfg = config_data["pipeline"]
            validation_results["sections"]["pipeline"] = {
                "status": "configured",
                "validation_required": pipeline_cfg.get("validation_required", True),
                "auto_execute": pipeline_cfg.get("auto_execute", False),
            }
        else:
            validation_results["sections"]["pipeline"] = {"status": "missing"}

        # Check environment variables for database connections
        logger.info("Checking database connection configurations...")

        # MySQL
        mysql_vars = ["MYSQL_HOST", "MYSQL_USER", "MYSQL_PASSWORD", "MYSQL_DATABASE"]
        mysql_configured = all(os.environ.get(var) for var in mysql_vars)
        missing_mysql = [var for var in mysql_vars if not os.environ.get(var)]
        validation_results["database_connections"]["mysql"] = {
            "configured": mysql_configured,
            "missing_vars": missing_mysql if not mysql_configured else [],
        }
        if mysql_configured:
            logger.debug("MySQL configuration found")
        else:
            logger.warning(f"MySQL missing vars: {missing_mysql}")

        # Supabase
        supabase_vars = ["SUPABASE_PROJECT_ID", "SUPABASE_ANON_PUBLIC_KEY"]
        supabase_configured = all(os.environ.get(var) for var in supabase_vars)
        missing_supabase = [var for var in supabase_vars if not os.environ.get(var)]
        validation_results["database_connections"]["supabase"] = {
            "configured": supabase_configured,
            "missing_vars": missing_supabase if not supabase_configured else [],
        }

        # LLM API Keys
        llm_keys = {
            "openai": "OPENAI_API_KEY",
            "claude": "CLAUDE_API_KEY",
            "gemini": "GEMINI_API_KEY",
        }
        for name, var in llm_keys.items():
            validation_results["llm_providers"][name] = {
                "configured": bool(os.environ.get(var)),
                "env_var": var,
            }

        # Validate connection configurations using new validation system
        # Determine validation mode: CLI flag > env var > default
        if parsed_args.mode:
            validation_mode = ValidationMode(parsed_args.mode)
            validator = ConnectionValidator(validation_mode)
        else:
            validator = ConnectionValidator.from_env()
            validation_mode = get_validation_mode()

        # Test connection configurations if they exist in environment
        connection_configs = []

        # MySQL configuration from environment
        if mysql_configured:
            mysql_config = {
                "type": "mysql",
                "host": os.environ.get("MYSQL_HOST"),
                "port": int(os.environ.get("MYSQL_PORT", "3306")),
                "database": os.environ.get("MYSQL_DATABASE"),
                "user": os.environ.get("MYSQL_USER"),
                "password": os.environ.get("MYSQL_PASSWORD"),
            }
            result = validator.validate_connection(mysql_config)
            validation_results["connection_validation"]["mysql"] = {
                "is_valid": result.is_valid,
                "errors": [
                    {"path": e.path, "message": e.message, "fix": e.fix} for e in result.errors
                ],
                "warnings": [
                    {"path": w.path, "message": w.message, "fix": w.fix} for w in result.warnings
                ],
            }

        # Supabase configuration from environment
        if supabase_configured:
            # Build URL from project ID
            project_id = os.environ.get("SUPABASE_PROJECT_ID")
            supabase_config = {
                "type": "supabase",
                "url": f"https://{project_id}.supabase.co",
                "key": os.environ.get("SUPABASE_ANON_PUBLIC_KEY"),
            }
            result = validator.validate_connection(supabase_config)
            validation_results["connection_validation"]["supabase"] = {
                "is_valid": result.is_valid,
                "errors": [
                    {"path": e.path, "message": e.message, "fix": e.fix} for e in result.errors
                ],
                "warnings": [
                    {"path": w.path, "message": w.message, "fix": w.fix} for w in result.warnings
                ],
            }

        # Set validation mode in results for reference
        validation_results["validation_mode"] = validation_mode.value

        # Log validation completion
        session.log_event(
            "validate_complete",
            validation_mode=validation_mode.value,
            config_valid=True,
            databases_configured=sum(
                1
                for db_info in validation_results["database_connections"].values()
                if db_info["configured"]
            ),
            llm_providers=sum(
                1
                for llm_info in validation_results["llm_providers"].values()
                if llm_info["configured"]
            ),
        )

        # Output results
        if use_json:
            print(json.dumps(validation_results, indent=2))
        else:
            # Rich console output (existing code)
            console.print(f"‚úÖ Configuration file '{parsed_args.config}' is valid")
            console.print("\nüìù Configuration validation:")

            for section, data in validation_results["sections"].items():
                if data["status"] == "configured":
                    details = ", ".join([f"{k}={v}" for k, v in data.items() if k != "status"][:2])
                    console.print(f"   {section.capitalize()}: ‚úÖ {details}")
                else:
                    console.print(f"   {section.capitalize()}: ‚ùå Missing section")

            console.print("\nüîå Database connection status:")
            for db, data in validation_results["database_connections"].items():
                if data["configured"]:
                    console.print(f"   {db.upper()}: ‚úÖ Configured")
                else:
                    console.print(f"   {db.upper()}: ‚ùå Missing variables")
                    if data["missing_vars"]:
                        console.print(f"      Missing: {', '.join(data['missing_vars'])}")

            console.print("\nü§ñ LLM API key status:")
            configured_llms = []
            for name, data in validation_results["llm_providers"].items():
                if data["configured"]:
                    configured_llms.append(name.capitalize())
                    console.print(f"   {name.capitalize()}: ‚úÖ Configured")
                else:
                    console.print(f"   {name.capitalize()}: ‚ùå Missing {data['env_var']}")

            if not configured_llms:
                console.print(
                    "   ‚ö†Ô∏è  No LLM providers configured - chat functionality will not work"
                )
            else:
                console.print(f"\nüí° Ready to use: {', '.join(configured_llms)}")

            # Display connection validation results
            if validation_results["connection_validation"]:
                console.print(
                    f"\nüîç Connection validation (mode: {validation_results['validation_mode']}):"
                )

                for db, result in validation_results["connection_validation"].items():
                    if result["is_valid"] and not result["warnings"]:
                        console.print(f"   {db.upper()}: ‚úÖ Configuration valid")
                    elif result["is_valid"] and result["warnings"]:
                        console.print(f"   {db.upper()}: ‚ö†Ô∏è  Configuration valid with warnings")
                        for warning in result["warnings"]:
                            console.print(f"      WARN {warning['path']}: {warning['fix']}")
                    else:
                        console.print(f"   {db.upper()}: ‚ùå Configuration invalid")
                        for error in result["errors"]:
                            console.print(f"      ERROR {error['path']}: {error['fix']}")

                # Show validation mode help
                if validation_results["validation_mode"] == "warn":
                    console.print("   üí° Validation warnings won't block execution")
                elif validation_results["validation_mode"] == "off":
                    console.print("   üí° Validation is disabled (OSIRIS_VALIDATION=off)")
                elif validation_results["validation_mode"] == "strict":
                    console.print("   üí° Strict mode: validation errors will block execution")

    except FileNotFoundError:
        session.log_event(
            "validate_error", error_type="file_not_found", config_file=parsed_args.config
        )
        if use_json:
            print(
                json.dumps(
                    {
                        "error": f"Configuration file '{parsed_args.config}' not found",
                        "suggestion": "Run 'osiris init' to create a sample configuration",
                    }
                )
            )
        else:
            console.print(f"‚ùå Configuration file '{parsed_args.config}' not found")
            console.print("üí° Run 'osiris init' to create a sample configuration")
        sys.exit(1)
    except Exception as e:
        session.log_event("validate_error", error_type="validation_failed", error_message=str(e))
        if use_json:
            print(json.dumps({"error": f"Configuration validation failed: {str(e)}"}))
        else:
            console.print(f"‚ùå Configuration validation failed: {e}")
        sys.exit(1)
    finally:
        # Always close the session
        if "session" in locals():
            session.close()


# show_run_help removed - now in run.py

def run_command(args):
    """Execute a pipeline (OML or manifest)."""
    from .run import run_command as new_run_command
    new_run_command(args)


# Old show_run_help removed

def REMOVED_OLD_CONTENT():
    """Removed old run command implementation."""
    return
# The following was the old implementation - now removed:
# if json_output:
        help_data = {
            "command": "run",
            "description": "Execute or validate data pipeline configurations",
            "usage": "osiris run [OPTIONS] PIPELINE_FILE",
            "arguments": {"PIPELINE_FILE": "Path to the pipeline YAML file to execute"},
            "options": {
                "--dry-run": "Validate pipeline structure without executing",
                "--verbose": "Show detailed execution logs and debug info",
                "--json": "Output in JSON format for programmatic use",
                "--help": "Show this help message",
            },
            "pipeline_format": [
                "extract: Data source configuration (MySQL, CSV, etc.)",
                "transform: DuckDB SQL transformations and analysis",
                "load: Output format and destination (CSV, Parquet, etc.)",
            ],
            "examples": [
                "osiris run sample_pipeline.yaml --dry-run",
                "osiris run sample_pipeline.yaml",
                "osiris run sample_pipeline.yaml --verbose",
            ],
        }
        print(json.dumps(help_data, indent=2))
        return
    console.print()
    console.print("[bold green]osiris run - Execute Pipeline YAML Files[/bold green]")
    console.print("üöÄ Execute or validate data pipeline configurations generated by Osiris chat")
    console.print()

    # Usage
    console.print("[bold]Usage:[/bold] osiris run [OPTIONS] PIPELINE_FILE")
    console.print()

    # Description
    console.print("[bold blue]üìñ What this does[/bold blue]")
    console.print("  ‚Ä¢ Compiles OML pipeline to deterministic manifest")
    console.print("  ‚Ä¢ Resolves parameters with proper precedence")
    console.print("  ‚Ä¢ Executes the pipeline with local runner")
    console.print("  ‚Ä¢ Creates session with full audit trail")
    console.print("  ‚Ä¢ Saves artifacts to session directory")
    console.print()

    # Arguments
    console.print("[bold blue]üìÅ Arguments[/bold blue]")
    console.print("  [cyan]PIPELINE_FILE[/cyan]     Path to the pipeline YAML file to execute")
    console.print("                      Generated by 'osiris chat' or manually created")
    console.print()

    # Options
    console.print("[bold blue]‚öôÔ∏è  Options[/bold blue]")
    console.print("  [cyan]--out[/cyan]             Output directory for artifacts")
    console.print("                      Default: logs/<session_id>/artifacts")
    console.print("  [cyan]--profile, -p[/cyan]     Active profile (dev, staging, prod)")
    console.print("  [cyan]--param[/cyan]           Set parameters (format: key=value)")
    console.print("                      Can be used multiple times")
    console.print("  [cyan]--verbose[/cyan]         Show detailed execution logs")
    console.print("  [cyan]--json[/cyan]            Output in JSON format")
    console.print("  [cyan]--help[/cyan]            Show this help message")
    console.print()

    # Examples
    console.print("[bold blue]üí° Examples[/bold blue]")
    console.print("  [dim]# Basic execution[/dim]")
    console.print("  [green]osiris run pipeline.yaml[/green]")
    console.print()
    console.print("  [dim]# Run with production profile[/dim]")
    console.print("  [green]osiris run pipeline.yaml --profile prod[/green]")
    console.print()
    console.print("  [dim]# Override parameters[/dim]")
    console.print("  [green]osiris run pipeline.yaml --param db=mydb --param env=staging[/green]")
    console.print()
    console.print("  [dim]# Custom output directory[/dim]")
    console.print("  [green]osiris run pipeline.yaml --out /tmp/results[/green]")
    console.print()

    # Pipeline Format
    console.print("[bold blue]üìã Expected Pipeline Format[/bold blue]")
    console.print("  YAML files must contain these sections:")
    console.print("  ‚Ä¢ [cyan]extract:[/cyan] Data source configuration (MySQL, CSV, etc.)")
    console.print("  ‚Ä¢ [cyan]transform:[/cyan] DuckDB SQL transformations and analysis")
    console.print("  ‚Ä¢ [cyan]load:[/cyan] Output format and destination (CSV, Parquet, etc.)")
    console.print()

    # Workflow
    console.print("[bold blue]üîÑ Typical Workflow[/bold blue]")
    console.print(
        "  [cyan]1.[/cyan] [green]osiris chat[/green]      Generate pipeline via conversation"
    )
    console.print(
        "  [cyan]2.[/cyan] [green]osiris run <file> --dry-run[/green]  Validate the generated YAML"
    )
    console.print(
        "  [cyan]3.[/cyan] [green]osiris run <file>[/green]             Execute the validated pipeline"
    )


def dump_prompts_command(args):
    """Export LLM system prompts for customization (pro mode)."""
    import argparse

    # SKIP ALL OLD run_command IMPLEMENTATION
    return  # Temporary skip

def SKIP_pipeline_file():
    pipeline_file = None
    profile = None
    params = {}
    output_dir = "artifacts"
    verbose = False
    use_json = json_output or "--json" in args

    i = 0
    while i < len(args):
        arg = args[i]

        if arg.startswith("--"):
            if arg == "--out":
                if i + 1 < len(args) and not args[i + 1].startswith("--"):
                    output_dir = args[i + 1]
                    i += 1
                else:
                    error_msg = "Option --out requires a value"
                    if use_json:
                        print(json.dumps({"error": error_msg}))
                    else:
                        console.print(f"[red]‚ùå {error_msg}[/red]")
                    sys.exit(2)

            elif arg in ("--profile", "-p"):
                if i + 1 < len(args) and not args[i + 1].startswith("--"):
                    profile = args[i + 1]
                    i += 1
                else:
                    error_msg = "Option --profile requires a value"
                    if use_json:
                        print(json.dumps({"error": error_msg}))
                    else:
                        console.print(f"[red]‚ùå {error_msg}[/red]")
                    sys.exit(2)

            elif arg == "--param":
                if i + 1 < len(args) and not args[i + 1].startswith("--"):
                    param_str = args[i + 1]
                    if "=" in param_str:
                        key, value = param_str.split("=", 1)
                        params[key] = value
                    else:
                        error_msg = f"Invalid parameter format: {param_str} (expected key=value)"
                        if use_json:
                            print(json.dumps({"error": error_msg}))
                        else:
                            console.print(f"[red]‚ùå {error_msg}[/red]")
                        sys.exit(2)
                    i += 1
                else:
                    error_msg = "Option --param requires a value"
                    if use_json:
                        print(json.dumps({"error": error_msg}))
                    else:
                        console.print(f"[red]‚ùå {error_msg}[/red]")
                    sys.exit(2)

            elif arg == "--verbose":
                verbose = True

            elif arg == "--json":
                use_json = True

            else:
                error_msg = f"Unknown option: {arg}"
                if use_json:
                    print(json.dumps({"error": error_msg}))
                else:
                    console.print(f"[red]‚ùå {error_msg}[/red]")
                    console.print("[dim]üí° Run 'osiris run --help' to see available options[/dim]")
                sys.exit(2)
        else:
            if pipeline_file is None:
                pipeline_file = arg
            else:
                error_msg = "Multiple pipeline files specified"
                if use_json:
                    print(json.dumps({"error": error_msg}))
                else:
                    console.print(f"[red]‚ùå {error_msg}[/red]")
                    console.print("[dim]üí° Only one pipeline file can be processed at a time[/dim]")
                sys.exit(2)

        i += 1

    if not pipeline_file:
        error_msg = "No pipeline file specified"
        if use_json:
            print(json.dumps({"error": error_msg, "usage": "osiris run PIPELINE_FILE"}))
        else:
            console.print(f"[red]‚ùå {error_msg}[/red]")
            console.print("[dim]üí° Run 'osiris run --help' to see usage examples[/dim]")
        sys.exit(2)

    # Check if file exists
    if not Path(pipeline_file).exists():
        error_msg = f"Pipeline file not found: {pipeline_file}"
        if use_json:
            print(json.dumps({"error": error_msg}))
        else:
            console.print(f"[red]‚ùå {error_msg}[/red]")
        sys.exit(2)

    # Detect if this is a compiled manifest or an OML file
    import yaml
    with open(pipeline_file) as f:
        pipeline_content = yaml.safe_load(f)

    is_manifest = "pipeline" in pipeline_content and "steps" in pipeline_content and "meta" in pipeline_content
    is_oml = "oml_version" in pipeline_content or "name" in pipeline_content

    if is_manifest and not is_oml:
        # This is a compiled manifest, suggest using execute
        error_msg = f"This appears to be a compiled manifest. Please use 'osiris execute {pipeline_file}' to run it, or provide an OML file to 'osiris run'."
        if use_json:
            print(json.dumps({"error": error_msg, "file_type": "manifest"}))
        else:
            console.print(f"[yellow]‚ö†Ô∏è  {error_msg}[/yellow]")
            console.print("[dim]üí° The 'run' command compiles and executes OML files in one step.[/dim]")
            console.print("[dim]üí° For pre-compiled manifests, use 'osiris execute' (though deprecated).[/dim]")
        sys.exit(2)

    # Create a session for this run (compile + execute)
    session_id = f"run_{int(time.time() * 1000)}"
    session = SessionContext(session_id=session_id, base_logs_dir=Path("logs"))
    set_current_session(session)

    try:
        # Log run start
        log_event("run_start", pipeline=pipeline_file, profile=profile, params=params, output_dir=output_dir)
        start_time = time.time()

        if not use_json:
            console.print(f"[cyan]üîß Compiling and executing {pipeline_file}...[/cyan]")
            console.print(f"[dim]üìÅ Session: logs/{session_id}/[/dim]")

        # Phase 1: Compile
        log_event("compile_start", pipeline=pipeline_file)
        compile_start = time.time()

        session_compiled_dir = session.session_dir / "compiled"
        session_compiled_dir.mkdir(parents=True, exist_ok=True)

        compiler = CompilerV0(output_dir=str(session_compiled_dir))
        compile_success, compile_message = compiler.compile(
            oml_path=pipeline_file, profile=profile, cli_params=params
        )

        compile_duration = time.time() - compile_start
        log_metric("compilation_duration", compile_duration, unit="seconds")

        if not compile_success:
            log_event("compile_error", error=compile_message, duration=compile_duration)

            if use_json:
                print(json.dumps({
                    "status": "error",
                    "phase": "compile",
                    "message": compile_message,
                    "session_id": session_id,
                    "session_dir": f"logs/{session_id}"
                }))
            else:
                console.print(f"[red]‚ùå Compilation failed: {compile_message}[/red]")
                console.print(f"[dim]üìÅ Session logs: logs/{session_id}/[/dim]")
            sys.exit(2)

        log_event("compile_complete", message=compile_message, duration=compile_duration)

        # Phase 2: Execute
        log_event("execute_start")
        execute_start = time.time()

        session_artifacts_dir = session.session_dir / "artifacts"
        session_artifacts_dir.mkdir(parents=True, exist_ok=True)

        manifest_path = session_compiled_dir / "manifest.yaml"
        runner = RunnerV0(manifest_path=str(manifest_path), output_dir=str(session_artifacts_dir))
        execute_success = runner.run()

        execute_duration = time.time() - execute_start
        log_metric("execution_duration", execute_duration, unit="seconds")

        total_duration = time.time() - start_time
        log_metric("total_duration", total_duration, unit="seconds")

        # If user specified --out, copy artifacts there too
        if output_dir != "artifacts":
            user_output_dir = Path(output_dir)
            user_output_dir.mkdir(parents=True, exist_ok=True)
            # Copy artifacts to user-specified location
            for item in session_artifacts_dir.iterdir():
                if item.is_file():
                    shutil.copy2(item, user_output_dir / item.name)
                elif item.is_dir():
                    shutil.copytree(item, user_output_dir / item.name, dirs_exist_ok=True)

        if execute_success:
            log_event("run_complete", total_duration=total_duration, steps_executed=len(runner.events))

            if use_json:
                print(json.dumps({
                    "status": "success",
                    "message": "Pipeline executed successfully",
                    "session_id": session_id,
                    "session_dir": f"logs/{session_id}",
                    "compiled_dir": f"logs/{session_id}/compiled",
                    "artifacts_dir": output_dir if output_dir != "artifacts" else f"logs/{session_id}/artifacts",
                    "steps_executed": len(runner.events),
                    "duration": {
                        "compile": compile_duration,
                        "execute": execute_duration,
                        "total": total_duration
                    }
                }))
            else:
                console.print("[green]‚úÖ Pipeline executed successfully[/green]")
                console.print(f"[dim]üìÅ Session: logs/{session_id}/[/dim]")
                if output_dir != "artifacts":
                    console.print(f"[dim]üìÅ Artifacts: {output_dir}/[/dim]")

                # Show executed steps
                step_count = sum(1 for e in runner.events if e["type"] == "step_complete")
                if step_count > 0:
                    console.print(f"[dim]‚úì {step_count} steps completed[/dim]")
                console.print(f"[dim]‚è±  Total time: {total_duration:.2f}s (compile: {compile_duration:.2f}s, execute: {execute_duration:.2f}s)[/dim]")

            sys.exit(0)
        else:
            # Find error details
            error_events = [e for e in runner.events if e["type"] in ("step_error", "run_error")]
            error_msg = "Pipeline execution failed"
            if error_events:
                last_error = error_events[-1]["data"]
                if "error" in last_error:
                    error_msg = f"Pipeline execution failed: {last_error['error']}"
                elif "message" in last_error:
                    error_msg = f"Pipeline execution failed: {last_error['message']}"

            log_event("run_error", phase="execute", error=error_msg, duration=total_duration)

            if use_json:
                print(json.dumps({
                    "status": "error",
                    "phase": "execute",
                    "message": error_msg,
                    "session_id": session_id,
                    "session_dir": f"logs/{session_id}",
                    "events": runner.events if verbose else None
                }))
            else:
                console.print(f"[red]‚ùå {error_msg}[/red]")
                console.print(f"[dim]üìÅ Session logs: logs/{session_id}/[/dim]")

                if verbose and error_events:
                    console.print("\n[dim]Error details:[/dim]")
                    for event in error_events:
                        console.print(f"  [red]‚Ä¢ {event['data']}[/red]")

            sys.exit(1)

    except Exception as e:
        # Handle unexpected errors
        error_msg = f"Unexpected error: {str(e)}"
        log_event("run_error", error=error_msg)

        if use_json:
            print(json.dumps({
                "status": "error",
                "message": error_msg,
                "session_id": session_id,
                "session_dir": f"logs/{session_id}"
            }))
        else:
            console.print(f"[red]‚ùå {error_msg}[/red]")
            console.print(f"[dim]üìÅ Session logs: logs/{session_id}/[/dim]")

        sys.exit(1)

    finally:
        # Clean up session
        session.close()
        set_current_session(None)


def dump_prompts_command(args):
    """Export LLM system prompts for customization (pro mode)."""
    import argparse

    # Check for help first before parsing
    if "--help" in args or "-h" in args:
        # Check if JSON output is requested
        json_mode = "--json" in args if args else False
        use_json = json_mode or json_output

        if use_json:
            help_data = {
                "command": "dump-prompts",
                "description": "Export LLM system prompts for customization (pro mode)",
                "usage": "osiris dump-prompts [OPTIONS]",
                "options": {
                    "--export": "Actually perform the export (required)",
                    "--dir DIR": "Export to specific directory (default: .osiris_prompts)",
                    "--force": "Overwrite existing prompts directory",
                    "--json": "Output in JSON format for programmatic use",
                    "--help": "Show this help message",
                },
                "exports": [
                    "conversation_system.txt - Main LLM personality & behavior",
                    "sql_generation_system.txt - SQL generation instructions",
                    "user_prompt_template.txt - User context building template",
                    "config.yaml - Prompt metadata",
                    "README.md - Customization guide",
                ],
                "workflow": [
                    "osiris dump-prompts --export",
                    "edit .osiris_prompts/*.txt",
                    "osiris chat --pro-mode",
                ],
                "examples": [
                    "osiris dump-prompts --export",
                    "osiris dump-prompts --export --dir custom_prompts/",
                    "osiris dump-prompts --export --force",
                ],
            }
            print(json.dumps(help_data, indent=2))
            return
        console.print()
        console.print("[bold green]osiris dump-prompts - Export LLM System Prompts[/bold green]")
        console.print("ü§ñ Export current system prompts to files for pro mode customization")
        console.print()

        console.print("[bold]Usage:[/bold] osiris dump-prompts [OPTIONS]")
        console.print()

        console.print("[bold blue]üìñ What this does[/bold blue]")
        console.print("  ‚Ä¢ Exports conversation system prompt to conversation_system.txt")
        console.print("  ‚Ä¢ Exports SQL generation prompt to sql_generation_system.txt")
        console.print("  ‚Ä¢ Exports user context template to user_prompt_template.txt")
        console.print("  ‚Ä¢ Creates config.yaml with prompt metadata")
        console.print("  ‚Ä¢ Generates README.md with customization guide")
        console.print()

        console.print("[bold blue]‚öôÔ∏è  Options[/bold blue]")
        console.print("  [cyan]--export[/cyan]        Actually perform the export (required)")
        console.print(
            "  [cyan]--dir DIR[/cyan]       Export to specific directory (default: .osiris_prompts)"
        )
        console.print("  [cyan]--force[/cyan]         Overwrite existing prompts directory")
        console.print("  [cyan]--json[/cyan]          Output in JSON format for programmatic use")
        console.print("  [cyan]--help[/cyan]          Show this help message")
        console.print()

        console.print("[bold blue]üí° Pro Mode Workflow[/bold blue]")
        console.print(
            "  [cyan]1.[/cyan] [green]osiris dump-prompts --export[/green]  Export system prompts"
        )
        console.print(
            "  [cyan]2.[/cyan] [green]edit .osiris_prompts/*.txt[/green]   Customize prompts"
        )
        console.print(
            "  [cyan]3.[/cyan] [green]osiris chat --pro-mode[/green]       Use custom prompts"
        )
        console.print()

        console.print("[bold blue]üéØ Use Cases[/bold blue]")
        console.print("  ‚Ä¢ Customize LLM personality for specific domains")
        console.print("  ‚Ä¢ Experiment with different prompting strategies")
        console.print("  ‚Ä¢ Debug LLM behavior by seeing exact instructions")
        console.print("  ‚Ä¢ Adapt Osiris for industry-specific terminology")
        console.print()

        return

    # Parse dump-prompts-specific arguments
    parser = argparse.ArgumentParser(
        description="Export LLM prompts for customization", add_help=False
    )
    parser.add_argument("--dir", default=".osiris_prompts", help="Directory to export prompts to")
    parser.add_argument("--force", action="store_true", help="Overwrite existing prompts directory")
    parser.add_argument("--export", action="store_true", help="Actually perform the export")
    parser.add_argument("--json", action="store_true", help="Output in JSON format")

    # Parse arguments
    parsed_args = parser.parse_args(args)

    # Check if JSON output requested
    use_json = json_output or parsed_args.json

    # Require explicit --export flag to avoid accidental exports
    if not parsed_args.export:
        if use_json:
            print(
                json.dumps(
                    {
                        "status": "ready",
                        "message": "Ready to export prompts",
                        "target_directory": parsed_args.dir,
                        "action_required": "Add --export flag to actually export",
                        "command": "osiris dump-prompts --export",
                    },
                    indent=2,
                )
            )
        else:
            console.print()
            console.print("üìã [bold yellow]Ready to export prompts[/bold yellow]")
            console.print(f"üìÅ Target directory: [cyan]{parsed_args.dir}[/cyan]")
            console.print()
            console.print("üí° To actually export the prompts, add the [cyan]--export[/cyan] flag:")
            console.print("   [green]osiris dump-prompts --export[/green]")
            console.print()
            console.print("üîç Use [cyan]--help[/cyan] to see all options")
        return

    try:
        # Check if directory exists and handle --force
        from pathlib import Path

        from ..core.prompt_manager import PromptManager

        prompts_dir = Path(parsed_args.dir)
        if prompts_dir.exists() and not parsed_args.force:
            console.print()
            console.print(
                f"‚ö†Ô∏è  [bold yellow]Directory '{parsed_args.dir}' already exists[/bold yellow]"
            )
            console.print("üí° Options:")
            console.print(
                "   [green]osiris dump-prompts --export --force[/green]     # Overwrite existing"
            )
            console.print(
                "   [green]osiris dump-prompts --export --dir custom/[/green]  # Use different directory"
            )
            console.print()
            sys.exit(1)

        # Show what we're about to do
        console.print()
        console.print("üöÄ [bold green]Exporting LLM system prompts...[/bold green]")
        console.print(f"üìÅ Directory: [cyan]{parsed_args.dir}[/cyan]")
        console.print()

        # Initialize prompt manager and dump prompts
        prompt_manager = PromptManager(prompts_dir=parsed_args.dir)
        result = prompt_manager.dump_prompts()

        console.print()
        console.print(result)
        console.print()

    except Exception as e:
        console.print()
        console.print(f"‚ùå [bold red]Failed to dump prompts:[/bold red] {e}")
        console.print()
        sys.exit(1)


def components_command(args: list) -> None:
    """Manage and inspect Osiris components."""

    def show_components_help():
        """Show components command help."""
        console.print()
        console.print("[bold green]osiris components - Component Management[/bold green]")
        console.print("üß© Manage and inspect Osiris component specifications")
        console.print()
        console.print("[bold]Usage:[/bold] osiris components SUBCOMMAND [OPTIONS]")
        console.print()
        console.print("[bold blue]Subcommands[/bold blue]")
        console.print("  [cyan]list[/cyan]              List available components")
        console.print("  [cyan]show <name>[/cyan]       Show component details")
        console.print("  [cyan]validate <name>[/cyan]   Validate component spec")
        console.print("  [cyan]config-example[/cyan]    Show example configuration")
        console.print("  [cyan]discover <name>[/cyan]   Run discovery mode (if supported)")
        console.print()
        console.print("[bold blue]Examples[/bold blue]")
        console.print("  [green]osiris components list[/green]")
        console.print("  [green]osiris components list --mode write[/green]")
        console.print("  [green]osiris components show mysql.extractor[/green]")
        console.print("  [green]osiris components validate mysql.writer[/green]")
        console.print("  [green]osiris components config-example supabase.extractor[/green]")
        console.print()

    if not args or args[0] in ["--help", "-h"]:
        show_components_help()
        return

    # Import the components module
    try:
        from .components_cmd import (
            discover_with_component,
            list_components,
            show_component,
            show_config_example,
            validate_component,
        )
    except ImportError as e:
        console.print(f"‚ùå Failed to import components module: {e}")
        sys.exit(1)

    subcommand = args[0]
    subcommand_args = args[1:]

    if subcommand == "list":
        # Parse list options
        mode = "all"
        as_json = False
        i = 0
        while i < len(subcommand_args):
            arg = subcommand_args[i]
            if arg == "--mode" and i + 1 < len(subcommand_args):
                mode = subcommand_args[i + 1]
                i += 2
            elif arg == "--json":
                as_json = True
                i += 1
            else:
                i += 1
        list_components(mode, as_json)
    elif subcommand == "show":
        if not subcommand_args:
            console.print("‚ùå Component name required")
            console.print("Usage: osiris components show <component_name>")
            sys.exit(1)
        as_json = "--json" in subcommand_args
        component_name = subcommand_args[0]
        show_component(component_name, as_json)
    elif subcommand == "validate":
        if not subcommand_args:
            console.print("‚ùå Component name required")
            console.print("Usage: osiris components validate <component_name> [OPTIONS]")
            console.print("Options:")
            console.print(
                "  --level LEVEL        Validation level: basic, enhanced, strict (default: enhanced)"
            )
            console.print(
                "  --session-id ID      Use specific session ID (default: auto-generated)"
            )
            console.print("  --logs-dir DIR       Directory for session logs (default: logs)")
            console.print(
                "  --log-level LEVEL    Log level: DEBUG, INFO, WARNING, ERROR (default: INFO)"
            )
            console.print(
                "  --events PATTERN     Event patterns to log, comma-separated (default: *)"
            )
            console.print("  --json               Output in JSON format")
            console.print("  --verbose            Include technical error details")
            sys.exit(1)

        # Parse arguments for components validate
        import argparse
        import os

        parser = argparse.ArgumentParser(add_help=False)
        parser.add_argument("component_name", help="Component to validate")
        parser.add_argument("--level", default="enhanced", choices=["basic", "enhanced", "strict"])
        parser.add_argument("--session-id", default=None, help="Session ID")
        parser.add_argument("--logs-dir", default=None, help="Logs directory")
        parser.add_argument("--log-level", default=None, help="Log level")
        parser.add_argument("--events", default=None, help="Event patterns")
        parser.add_argument("--json", action="store_true", help="JSON output")
        parser.add_argument("--verbose", action="store_true", help="Include technical details")

        try:
            parsed = parser.parse_args(subcommand_args)

            # Load config to get defaults (with precedence: CLI > ENV > YAML > defaults)
            from ..core.config import load_config

            # Try to load config file
            config_data = {}
            with contextlib.suppress(Exception):
                config_data = load_config("osiris.yaml")

            # Determine logs_dir with precedence
            logs_dir = "logs"  # default
            if "logging" in config_data and "logs_dir" in config_data["logging"]:
                logs_dir = config_data["logging"]["logs_dir"]  # YAML
            if "OSIRIS_LOGS_DIR" in os.environ:
                logs_dir = os.environ["OSIRIS_LOGS_DIR"]  # ENV
            if parsed.logs_dir:
                logs_dir = parsed.logs_dir  # CLI

            # Determine log_level with precedence
            log_level = "INFO"  # default
            if "logging" in config_data and "level" in config_data["logging"]:
                log_level = config_data["logging"]["level"]  # YAML
            if "OSIRIS_LOG_LEVEL" in os.environ:
                log_level = os.environ["OSIRIS_LOG_LEVEL"]  # ENV
            if parsed.log_level:
                log_level = parsed.log_level  # CLI

            # Determine events with precedence
            events = ["*"]  # default
            if "logging" in config_data and "events" in config_data["logging"]:
                events = config_data["logging"]["events"]  # YAML
            if "OSIRIS_LOG_EVENTS" in os.environ:
                events = [e.strip() for e in os.environ["OSIRIS_LOG_EVENTS"].split(",")]  # ENV
            if parsed.events:
                events = [e.strip() for e in parsed.events.split(",")]  # CLI

            validate_component(
                parsed.component_name,
                level=parsed.level,
                session_id=parsed.session_id,
                logs_dir=logs_dir,
                log_level=log_level,
                events=events,
                json_output=parsed.json,
                verbose=parsed.verbose,
            )
        except SystemExit:
            # argparse will print its own error message
            pass
        except Exception as e:
            console.print(f"‚ùå Error: {e}")
            sys.exit(1)
    elif subcommand == "config-example":
        if not subcommand_args:
            console.print("‚ùå Component name required")
            console.print("Usage: osiris components config-example <component_name>")
            sys.exit(1)
        example_index = 0
        component_name = subcommand_args[0]
        for i, arg in enumerate(subcommand_args):
            if arg == "--example-index" and i + 1 < len(subcommand_args):
                try:
                    example_index = int(subcommand_args[i + 1])
                except ValueError:
                    console.print("‚ùå Invalid example index")
                    sys.exit(1)
        show_config_example(component_name, example_index)
    elif subcommand == "discover":
        if not subcommand_args:
            console.print("‚ùå Component name required")
            console.print("Usage: osiris components discover <component_name> [--config FILE]")
            sys.exit(1)
        config_file = None
        component_name = subcommand_args[0]
        for i, arg in enumerate(subcommand_args):
            if arg == "--config" and i + 1 < len(subcommand_args):
                config_file = subcommand_args[i + 1]
        discover_with_component(component_name, config_file)
    else:
        console.print(f"‚ùå Unknown subcommand: {subcommand}")
        console.print("Available subcommands: list, show, validate, config-example, discover")
        console.print("Use 'osiris components --help' for detailed help.")


def logs_command(args: list) -> None:
    """Manage session logs (list, show, bundle, gc)."""
    from .logs import bundle_session, gc_sessions, list_sessions, show_session

    def show_logs_help():
        """Show logs command help."""
        console.print()
        console.print("[bold green]osiris logs - Session Log Management[/bold green]")
        console.print("üóÇÔ∏è  Manage session logs and artifacts for debugging and audit")
        console.print()
        console.print("[bold]Usage:[/bold] osiris logs SUBCOMMAND [OPTIONS]")
        console.print()
        console.print("[bold blue]Subcommands[/bold blue]")
        console.print(
            "  [cyan]list[/cyan]                   List recent session directories (wraps IDs by default)"
        )
        console.print("  [cyan]show --session <id>[/cyan]   Show session details and summary")
        console.print("  [cyan]bundle --session <id>[/cyan] Bundle session into zip file")
        console.print("  [cyan]gc[/cyan]                     Garbage collect old sessions")
        console.print()
        console.print("[bold blue]Examples[/bold blue]")
        console.print(
            "  [green]osiris logs list[/green]                         # List recent sessions"
        )
        console.print(
            "  [green]osiris logs list --no-wrap[/green]               # List with single-line IDs"
        )
        console.print(
            "  [green]osiris logs show --session 20250901_123456_abc[/green]  # Show session details"
        )
        console.print(
            "  [green]osiris logs show --session 20250901_123456_abc --tail[/green]  # Follow log file"
        )
        console.print(
            "  [green]osiris logs bundle --session 20250901_123456_abc[/green]  # Create bundle.zip"
        )
        console.print(
            "  [green]osiris logs gc --days 7 --max-gb 0.5[/green]    # Clean up old sessions"
        )
        console.print()

    if not args or args[0] in ["--help", "-h"]:
        show_logs_help()
        return

    subcommand = args[0]
    subcommand_args = args[1:]

    if subcommand == "list":
        list_sessions(subcommand_args)
    elif subcommand == "show":
        show_session(subcommand_args)
    elif subcommand == "bundle":
        bundle_session(subcommand_args)
    elif subcommand == "gc":
        gc_sessions(subcommand_args)
    else:
        console.print(f"‚ùå Unknown subcommand: {subcommand}")
        console.print("Available subcommands: list, show, bundle, gc")
        console.print("Use 'osiris logs --help' for detailed help.")


def test_command(args: list) -> None:
    """Run automated test scenarios."""
    import argparse

    def show_test_help():
        """Show test command help."""
        console.print()
        console.print("[bold green]osiris test - Automated Test Scenarios[/bold green]")
        console.print("üß™ Run automated validation test scenarios for M1b.3")
        console.print()
        console.print("[bold]Usage:[/bold] osiris test SUBCOMMAND [OPTIONS]")
        console.print()
        console.print("[bold blue]Subcommands[/bold blue]")
        console.print("  [cyan]validation[/cyan]    Run validation test scenarios")
        console.print()
        console.print("[bold blue]Options for validation[/bold blue]")
        console.print(
            "  [cyan]--scenario NAME[/cyan]  Scenario to run (valid|broken|unfixable|all, default: all)"
        )
        console.print("  [cyan]--out DIR[/cyan]        Output directory for artifacts")
        console.print("  [cyan]--max-attempts N[/cyan] Override max retry attempts")
        console.print()
        console.print("[bold blue]Scenarios[/bold blue]")
        console.print("  [cyan]valid[/cyan]     Pipeline that passes validation on first attempt")
        console.print("  [cyan]broken[/cyan]    Pipeline with fixable errors corrected after retry")
        console.print("  [cyan]unfixable[/cyan] Pipeline that fails after max attempts")
        console.print("  [cyan]all[/cyan]       Run all scenarios")
        console.print()
        console.print("[bold blue]Examples[/bold blue]")
        console.print(
            "  [green]osiris test validation[/green]                    # Run all scenarios"
        )
        console.print(
            "  [green]osiris test validation --scenario broken[/green] # Run broken scenario"
        )
        console.print(
            "  [green]osiris test validation --out ./results[/green]   # Custom output dir"
        )
        console.print()

    parser = argparse.ArgumentParser(prog="osiris test", add_help=False)
    parser.add_argument("subcommand", nargs="?", help="Subcommand to run")
    parser.add_argument("--help", "-h", action="store_true", help="Show help")
    parser.add_argument(
        "--scenario", choices=["valid", "broken", "unfixable", "all"], default="all"
    )
    parser.add_argument("--out", type=str, help="Output directory")
    parser.add_argument("--max-attempts", type=int, help="Max retry attempts")

    # Parse args
    try:
        parsed_args = parser.parse_args(args)
    except SystemExit:
        show_test_help()
        return

    if parsed_args.help or not parsed_args.subcommand:
        show_test_help()
        return

    if parsed_args.subcommand == "validation":
        # Import and run test harness
        from pathlib import Path

        from osiris.core.test_harness import ValidationTestHarness

        try:
            harness = ValidationTestHarness(max_attempts=parsed_args.max_attempts)
            output_dir = Path(parsed_args.out) if parsed_args.out else None

            if parsed_args.scenario == "all":
                results = harness.run_all_scenarios(output_dir=output_dir)
                # Use the worst exit code from all scenarios
                worst_code = max(result["return_code"] for _, result in results.values())
                sys.exit(worst_code)
            else:
                success, result = harness.run_scenario(parsed_args.scenario, output_dir=output_dir)
                # Use the return_code from the result
                sys.exit(result["return_code"])

        except Exception as e:
            console.print(f"[bold red]Error running test scenario: {e}[/bold red]")
            logger.error(f"Test scenario failed: {e}", exc_info=True)
            sys.exit(1)
    else:
        console.print(f"‚ùå Unknown subcommand: {parsed_args.subcommand}")
        console.print("Available subcommands: validation")
        console.print("Use 'osiris test --help' for detailed help.")


def prompts_command(args: list):
    """Manage component context for LLM."""
    import argparse

    def show_prompts_help():
        """Show help for prompts command."""
        if json_output:
            help_data = {
                "command": "prompts",
                "description": "Manage component context for LLM",
                "subcommands": {
                    "build-context": {
                        "description": "Build minimal component context for LLM",
                        "usage": "osiris prompts build-context [OPTIONS]",
                        "options": {
                            "--out PATH": "Output file path (default: .osiris_prompts/context.json)",
                            "--force": "Force rebuild even if cache is valid",
                            "--session-id ID": "Use specific session ID (default: auto-generated)",
                            "--logs-dir DIR": "Directory for session logs (default: logs)",
                            "--log-level LEVEL": "Log level: DEBUG, INFO, WARNING, ERROR (default: INFO)",
                            "--events PATTERN": "Event patterns to log, comma-separated (default: *)",
                            "--json": "Output in JSON format",
                            "--help": "Show this help message",
                        },
                        "outputs": "Compact JSON with component names, required configs, enums, examples",
                        "metrics": "Size in bytes, estimated token count",
                    }
                },
                "examples": [
                    "osiris prompts build-context",
                    "osiris prompts build-context --out context.json",
                    "osiris prompts build-context --force",
                    "osiris prompts build-context --json",
                ],
            }
            print(json.dumps(help_data, indent=2))
            return

        console.print()
        console.print("[bold green]osiris prompts - Component Context Management[/bold green]")
        console.print("üß† Build minimal component context for LLM consumption")
        console.print()
        console.print("[bold]Usage:[/bold] osiris prompts SUBCOMMAND [OPTIONS]")
        console.print()
        console.print("[bold blue]Subcommands[/bold blue]")
        console.print("  [cyan]build-context[/cyan]    Build minimal component context for LLM")
        console.print()
        console.print("[bold blue]Options for build-context[/bold blue]")
        console.print(
            "  [cyan]--out PATH[/cyan]       Output file path (default: .osiris_prompts/context.json)"
        )
        console.print("  [cyan]--force[/cyan]          Force rebuild even if cache is valid")
        console.print(
            "  [cyan]--session-id ID[/cyan]  Use specific session ID (default: auto-generated)"
        )
        console.print("  [cyan]--logs-dir DIR[/cyan]   Directory for session logs (default: logs)")
        console.print("  [cyan]--log-level LEVEL[/cyan] Log level (default: INFO)")
        console.print("  [cyan]--events PATTERN[/cyan] Event patterns to log (default: *)")
        console.print("  [cyan]--json[/cyan]           Output in JSON format")
        console.print()
        console.print("[bold blue]Examples[/bold blue]")
        console.print("  [green]osiris prompts build-context[/green]")
        console.print("  [green]osiris prompts build-context --out context.json[/green]")
        console.print("  [green]osiris prompts build-context --force --json[/green]")
        console.print()

    if not args or args[0] in ["--help", "-h"]:
        show_prompts_help()
        return

    subcommand = args[0]
    subcommand_args = args[1:]

    if subcommand == "build-context":
        # Parse arguments for build-context
        import os
        import time
        from pathlib import Path

        from ..core.session_logging import SessionContext, set_current_session

        parser = argparse.ArgumentParser(description="Build component context", add_help=False)
        parser.add_argument("--out", help="Output file path")
        parser.add_argument("--force", action="store_true", help="Force rebuild")
        parser.add_argument("--session-id", default=None, help="Session ID")
        parser.add_argument("--logs-dir", default=None, help="Logs directory")
        parser.add_argument("--log-level", default=None, help="Log level")
        parser.add_argument("--events", default=None, help="Event patterns")
        parser.add_argument("--json", action="store_true", help="JSON output")
        parser.add_argument("--help", "-h", action="store_true", help="Show help")

        # Parse known args only
        parsed_args, _ = parser.parse_known_args(subcommand_args)

        if parsed_args.help:
            show_prompts_help()
            return

        # Load config to get defaults (with precedence: CLI > ENV > YAML > defaults)
        from ..core.config import load_config

        # Try to load config file
        config_data = {}
        with contextlib.suppress(Exception):
            config_data = load_config("osiris.yaml")

        # Determine logs_dir with precedence
        logs_dir = "logs"  # default
        if "logging" in config_data and "logs_dir" in config_data["logging"]:
            logs_dir = config_data["logging"]["logs_dir"]  # YAML
        if "OSIRIS_LOGS_DIR" in os.environ:
            logs_dir = os.environ["OSIRIS_LOGS_DIR"]  # ENV
        if parsed_args.logs_dir:
            logs_dir = parsed_args.logs_dir  # CLI

        # Determine log_level with precedence
        log_level = "INFO"  # default
        if "logging" in config_data and "level" in config_data["logging"]:
            log_level = config_data["logging"]["level"]  # YAML
        if "OSIRIS_LOG_LEVEL" in os.environ:
            log_level = os.environ["OSIRIS_LOG_LEVEL"]  # ENV
        if parsed_args.log_level:
            log_level = parsed_args.log_level  # CLI

        # Determine events with precedence
        events = ["*"]  # default
        if "logging" in config_data and "events" in config_data["logging"]:
            events = config_data["logging"]["events"]  # YAML
        if "OSIRIS_LOG_EVENTS" in os.environ:
            events = [e.strip() for e in os.environ["OSIRIS_LOG_EVENTS"].split(",")]  # ENV
        if parsed_args.events:
            events = [e.strip() for e in parsed_args.events.split(",")]  # CLI

        # Create session context
        if parsed_args.session_id is None:
            session_id = f"prompts_build_context_{int(time.time() * 1000)}"
        else:
            session_id = parsed_args.session_id

        # Create session with logging configuration
        session = SessionContext(
            session_id=session_id, base_logs_dir=Path(logs_dir), allowed_events=events
        )
        set_current_session(session)

        # Setup logging
        import logging

        log_level_int = getattr(logging, log_level.upper(), logging.INFO)
        enable_debug = log_level_int <= logging.DEBUG

        # Remove any existing console handlers from root logger
        # This prevents DEBUG messages from going to stdout unless explicitly requested
        root_logger = logging.getLogger()
        handlers_to_remove = []
        for handler in root_logger.handlers:
            if isinstance(handler, logging.StreamHandler):
                handlers_to_remove.append(handler)
        for handler in handlers_to_remove:
            root_logger.removeHandler(handler)

        # Setup session logging (only file handlers)
        session.setup_logging(level=log_level_int, enable_debug=enable_debug)

        # Only add console handler back if user explicitly requested DEBUG level
        if parsed_args.log_level and parsed_args.log_level.upper() == "DEBUG":
            console_handler = logging.StreamHandler()
            console_handler.setLevel(logging.DEBUG)
            console_formatter = logging.Formatter(
                "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                datefmt="%Y-%m-%d %H:%M:%S",
            )
            console_handler.setFormatter(console_formatter)
            root_logger.addHandler(console_handler)

        # Print session ID unless JSON output
        if not parsed_args.json:
            console.print(f"[dim]Session: {session_id}[/dim]")

        # Import and run the context builder
        try:
            from ..prompts.build_context import main as build_context_main

            result = build_context_main(
                output_path=parsed_args.out,
                force=parsed_args.force,
                json_output=parsed_args.json,
                session=session,
            )

            # If JSON output requested, include session_id
            if parsed_args.json and result:
                result["session_id"] = session_id
                print(json.dumps(result, separators=(",", ":")))

            # Close session properly
            session.close()

        except Exception as e:
            # Log error and close session
            session.log_event("run_error", error=str(e))
            session.close()

            if parsed_args.json:
                print(json.dumps({"error": str(e), "session_id": session_id}))
            else:
                console.print(f"[red]Error building context: {e}[/red]")
            sys.exit(1)
    else:
        if json_output:
            print(json.dumps({"error": f"Unknown subcommand: {subcommand}"}))
        else:
            console.print(f"‚ùå Unknown subcommand: {subcommand}")
            console.print("Available subcommands: build-context")
            console.print("Use 'osiris prompts --help' for detailed help.")


if __name__ == "__main__":
    main()
