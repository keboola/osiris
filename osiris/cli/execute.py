"""CLI command for executing compiled manifests with Rich formatting."""

import json
import sys
from pathlib import Path
from typing import List

from rich.console import Console

from ..core.runner_v0 import RunnerV0

console = Console()


def show_execute_help(json_output: bool = False):
    """Show formatted help for the execute command."""
    if json_output:
        help_data = {
            "command": "execute",
            "description": "Execute a compiled manifest",
            "usage": "osiris execute [OPTIONS] MANIFEST_FILE",
            "arguments": {"MANIFEST_FILE": "Path to the compiled manifest.yaml file"},
            "options": {
                "--out": "Output directory for artifacts (default: _artifacts/)",
                "--json": "Output in JSON format",
                "--verbose": "Show detailed execution logs",
                "--help": "Show this help message",
            },
            "examples": [
                "osiris execute compiled/manifest.yaml",
                "osiris execute compiled/manifest.yaml --out /tmp/artifacts",
                "osiris execute manifest.yaml --verbose",
            ],
        }
        print(json.dumps(help_data, indent=2))
        return

    console.print()
    console.print("[bold cyan]osiris execute - Execute Compiled Manifest[/bold cyan]")
    console.print("üöÄ Run compiled pipelines locally with deterministic execution")
    console.print()

    console.print("[bold]Usage:[/bold] osiris execute [OPTIONS] MANIFEST_FILE")
    console.print()

    console.print("[bold blue]üìñ What this does[/bold blue]")
    console.print("  ‚Ä¢ Loads compiled manifest and configurations")
    console.print("  ‚Ä¢ Executes pipeline steps in topological order")
    console.print("  ‚Ä¢ Runs extractors, transforms, and writers")
    console.print("  ‚Ä¢ Saves artifacts for each step")
    console.print("  ‚Ä¢ Logs structured execution events")
    console.print()

    console.print("[bold blue]üìÅ Arguments[/bold blue]")
    console.print("  [cyan]MANIFEST_FILE[/cyan]     Path to the compiled manifest.yaml")
    console.print("                      Generated by 'osiris compile'")
    console.print()

    console.print("[bold blue]‚öôÔ∏è  Options[/bold blue]")
    console.print("  [cyan]--out[/cyan]             Output directory for execution artifacts")
    console.print("                      Default: _artifacts/")
    console.print("                      Each step creates a subdirectory")
    console.print("  [cyan]--verbose[/cyan]         Show detailed execution logs")
    console.print("  [cyan]--json[/cyan]            Output in JSON format for programmatic use")
    console.print("  [cyan]--help[/cyan]            Show this help message")
    console.print()

    console.print("[bold blue]üí° Examples[/bold blue]")
    console.print("  [dim]# Execute a compiled manifest[/dim]")
    console.print("  [green]osiris execute compiled/manifest.yaml[/green]")
    console.print()
    console.print("  [dim]# Execute with custom output directory[/dim]")
    console.print("  [green]osiris execute compiled/manifest.yaml --out /tmp/artifacts[/green]")
    console.print()
    console.print("  [dim]# Execute with detailed logging[/dim]")
    console.print("  [green]osiris execute manifest.yaml --verbose[/green]")
    console.print()

    console.print("[bold blue]üìÇ Artifact Structure[/bold blue]")
    console.print("  Output directory will contain:")
    console.print("  [cyan]_artifacts/[/cyan]")
    console.print("  ‚îú‚îÄ‚îÄ [cyan]extract_customers/[/cyan]    # Extractor outputs")
    console.print("  ‚îÇ   ‚îî‚îÄ‚îÄ data.json")
    console.print("  ‚îú‚îÄ‚îÄ [cyan]transform_enrich/[/cyan]     # Transform outputs")
    console.print("  ‚îÇ   ‚îî‚îÄ‚îÄ transformed.json")
    console.print("  ‚îî‚îÄ‚îÄ [cyan]load_mysql/[/cyan]          # Writer outputs")
    console.print("      ‚îî‚îÄ‚îÄ mysql_load.csv")
    console.print()

    console.print("[bold blue]üîÑ Typical Workflow[/bold blue]")
    console.print(
        "  [cyan]1.[/cyan] [green]osiris compile pipeline.yaml[/green]          Compile OML"
    )
    console.print(
        "  [cyan]2.[/cyan] [green]osiris execute compiled/manifest.yaml[/green] Execute pipeline"
    )
    console.print("  [cyan]3.[/cyan] Check artifacts in _artifacts/ directory")
    console.print()

    console.print("[bold blue]‚ö° Supported Components[/bold blue]")
    console.print("  ‚Ä¢ [cyan]Extractors:[/cyan] Supabase, MySQL")
    console.print("  ‚Ä¢ [cyan]Transforms:[/cyan] DuckDB (single SQL statement)")
    console.print("  ‚Ä¢ [cyan]Writers:[/cyan] MySQL, Supabase")
    console.print()


def execute_command(args: List[str]):
    """Execute the execute command."""
    # Check for help flag or no arguments
    if not args or "--help" in args or "-h" in args:
        json_mode = "--json" in args if args else False
        show_execute_help(json_output=json_mode)
        return

    # Parse arguments manually (like run_command does)
    manifest_file = None
    output_dir = "_artifacts"
    verbose = False
    use_json = "--json" in args

    i = 0
    while i < len(args):
        arg = args[i]

        if arg.startswith("--"):
            if arg == "--out":
                if i + 1 < len(args) and not args[i + 1].startswith("--"):
                    output_dir = args[i + 1]
                    i += 1
                else:
                    error_msg = "Option --out requires a value"
                    if use_json:
                        print(json.dumps({"error": error_msg}))
                    else:
                        console.print(f"[red]‚ùå {error_msg}[/red]")
                    sys.exit(1)

            elif arg == "--verbose":
                verbose = True

            elif arg == "--json":
                use_json = True

            else:
                error_msg = f"Unknown option: {arg}"
                if use_json:
                    print(json.dumps({"error": error_msg}))
                else:
                    console.print(f"[red]‚ùå {error_msg}[/red]")
                    console.print(
                        "[dim]üí° Run 'osiris execute --help' to see available options[/dim]"
                    )
                sys.exit(1)
        else:
            if manifest_file is None:
                manifest_file = arg
            else:
                error_msg = "Multiple manifest files specified"
                if use_json:
                    print(json.dumps({"error": error_msg}))
                else:
                    console.print(f"[red]‚ùå {error_msg}[/red]")
                    console.print("[dim]üí° Only one manifest can be executed at a time[/dim]")
                sys.exit(1)

        i += 1

    # Check if manifest file was provided
    if not manifest_file:
        error_msg = "No manifest file specified"
        if use_json:
            print(json.dumps({"error": error_msg, "usage": "osiris execute MANIFEST_FILE"}))
        else:
            console.print(f"[red]‚ùå {error_msg}[/red]")
            console.print("[dim]üí° Run 'osiris execute --help' to see usage examples[/dim]")
        sys.exit(1)

    # Check if file exists
    if not Path(manifest_file).exists():
        error_msg = f"Manifest file not found: {manifest_file}"
        if use_json:
            print(json.dumps({"error": error_msg}))
        else:
            console.print(f"[red]‚ùå {error_msg}[/red]")
        sys.exit(1)

    # Execute the manifest
    if not use_json:
        console.print(f"[cyan]üöÄ Executing {manifest_file}...[/cyan]")
        if verbose:
            console.print(f"[dim]üìÅ Output directory: {output_dir}[/dim]")

    # Configure logging if verbose
    if verbose and not use_json:
        import logging

        logging.basicConfig(level=logging.INFO, format="[dim]%(levelname)s:[/dim] %(message)s")

    runner = RunnerV0(manifest_path=manifest_file, output_dir=output_dir)
    success = runner.run()

    if success:
        if use_json:
            print(
                json.dumps(
                    {
                        "status": "success",
                        "message": "Pipeline executed successfully",
                        "output_dir": output_dir,
                        "steps_executed": len(runner.events),
                    }
                )
            )
        else:
            console.print("[green]‚úÖ Pipeline executed successfully[/green]")
            console.print(f"[dim]üìÅ Artifacts saved to: {output_dir}[/dim]")

            # Show executed steps
            step_count = sum(1 for e in runner.events if e["type"] == "step_complete")
            if step_count > 0:
                console.print(f"[dim]‚úì {step_count} steps completed[/dim]")

        sys.exit(0)
    else:
        # Find error details
        error_events = [e for e in runner.events if e["type"] in ("step_error", "run_error")]
        error_msg = "Pipeline execution failed"
        if error_events:
            last_error = error_events[-1]["data"]
            if "error" in last_error:
                error_msg = f"Pipeline execution failed: {last_error['error']}"
            elif "message" in last_error:
                error_msg = f"Pipeline execution failed: {last_error['message']}"

        if use_json:
            print(
                json.dumps(
                    {
                        "status": "error",
                        "message": error_msg,
                        "events": runner.events if verbose else None,
                    }
                )
            )
        else:
            console.print(f"[red]‚ùå {error_msg}[/red]")

            if verbose and error_events:
                console.print("\n[dim]Error details:[/dim]")
                for event in error_events:
                    console.print(f"  [red]‚Ä¢ {event['data']}[/red]")

        sys.exit(1)
